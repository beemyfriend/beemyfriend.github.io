breaks = c(0, 1000, 2000, Inf),
palette = c('lightgrey', 'darkgrey', 'black'),
labels = c('< 1k', '< 2k', '> 2k')) +
tm_facets(along = 'month', free.coords = F, drop.units = T) +
tm_layout(title = "DC Bike Share Routes Over Time", title.size = 2)
tmap_animation(mini_anim, filename = "mini_anim.gif", delay = 100, width = 1000, height = 800)
mini_anim <- tm_shape(dc_routes_linestrings, bbox = dc_bbox) +
tm_lines(col = 'agg',
1,
title.col = '# Bikes',
breaks = c(0, 1000, 2000, Inf),
palette = c('lightgrey', 'darkgrey', 'black'),
labels = c('< 1k', '< 2k', '> 2k')) +
tm_facets(along = 'month', free.coords = F, drop.units = T) +
tm_layout(title = "DC Bike Share Routes Over Time", title.size = 2)
tmap_animation(mini_anim, filename = "mini_anim.gif", delay = 100, width = 1000, height = 800)
grey.colors()
grey.colors(4)
tm_shape(filter(dc_routes_intersect, agg>  500, month == 'Aug')) +
tm_lines(col = 'agg')
grey.colors(4)dc_routes_intersect$agg %>% summary
grey.colors(4)dc_routes_intersect$agg
dc_routes_intersect$agg
dc_routes_intersect$agg %>% summary()
dc_routes_linestrings <-dc_routes_intersect %>%
# filter(agg > 500) %>%
st_collection_extract('LINESTRING')
dc_routes_linestrings$agg %>% SUMMARY
dc_routes_linestrings$agg %>% summary()
mini_anim <- tm_shape(dc_routes_linestrings, bbox = dc_bbox) +
tm_lines(col = 'agg',
1,
title.col = '# Bikes',
breaks = c(0, 450, 900, 1350, Inf),
palette = grey.colors(4),
labels = c('< 450', '< 900', '<1350k', '>1350')) +
tm_facets(along = 'month', free.coords = F, drop.units = T) +
tm_layout(title = "DC Bike Share Routes Over Time", title.size = 1.5)
tmap_animation(mini_anim, filename = "mini_anim.gif", delay = 100, width = 1000, height = 800)
rev(grey.colors(4))
mini_anim <- tm_shape(dc_routes_linestrings, bbox = dc_bbox) +
tm_lines(col = 'agg',
1,
title.col = '# Bikes',
breaks = c(0, 450, 900, 1350, Inf),
palette = rev(grey.colors(4)),
labels = c('< 450', '< 900', '<1350k', '>1350')) +
tm_facets(along = 'month', free.coords = F, drop.units = T) +
tm_layout(title = "DC Bike Share Routes Over Time", title.size = 1.5)
tmap_animation(mini_anim, filename = "mini_anim.gif", delay = 100, width = 1000, height = 800)
letters()
letters
1:25
1:25 % 2
1:25 %% 2
!1:25 %% 2
!!1:25 %% 2
letters
1:25
!!1:25 %% 2
1:length(letters)
!!1:length(letters) %% 2
letters
1:length(letters)
!!1:length(letters) %% 2
data.frame(
characters = letters,
numerics = 1:length(letters),
logicals = !!1:length(letters) %% 2
)
library(tidyverse)
library(rvest)
html <- read_html("http://ccs2018.web.auth.gr/schedule")
tracks <- html_nodes(html, '#edit-field-session-tid') %>%
html_children() %>%
html_text() %>%
.[2:length(.)] %>%
c('All Tracks') %>%
str_replace_all('\\(', '\\\\(') %>%
str_replace_all('\\)', '\\\\)') %>%
str_replace('Complexity in Pyshics and Chemistry', 'Complexity in Physics and Chemistry')
talks <- html_nodes(html, ".views-align-center")
talk_title <- talks %>%
html_children %>%
html_text  %>%
str_replace_all('\\(', '\\\\(') %>%
str_replace_all('\\)', '\\\\)')
talk_rooms <- talks %>%
html_text() %>%
str_extract('Room.+$') %>%
str_replace('\\s*$', '') %>%
{
ifelse(is.na(.), '', .)
}
talk_track <- talks %>%
html_text() %>%
map_chr(function(x){
track <- tracks[str_detect(x, tracks)]
ifelse(identical(track, character(0)), '', track)
})
talks_speakers <- talks %>%
html_text %>%
str_replace('^\\s+', '') %>%
imap_chr(function(x, i){
speakers <- x
if(talk_track[i] != '') speakers <- str_replace(speakers, talk_track[i], '')
if(talk_title[i] != '') speakers <- str_replace(speakers, talk_title[i], '')
if(talk_rooms[i] != '') speakers <- str_replace(speakers, talk_rooms[i], '')
str_trim(speakers)
})
talks %>%
html_text() %>%
.[22] %>%
str_trim %>%
str_replace('The origins of new technological domains', '') %>%
str_replace('Cognition and Linguistics', '')%>%
str_replace('Room: 4', '') %>%
str_split(',| and ') %>%
unlist %>%
str_trim() %>%
map(function(x) x)
ccsTalks <- tibble(
title = talk_title,
track = talk_track,
rooms = talk_rooms,
speakers = talks_speakers
) %>%
filter(speakers != '') %>%
mutate(speakers = str_split(speakers, ',| and ')) %>%
unnest() %>%
mutate(speakers = str_trim(speakers))
ccsEL <- ccsTalks %>%
select(from = speakers, track) %>%
left_join(select(ccsTalks, to = speakers, track)) %>%
filter(from < to) %>%
group_by(from, to) %>%
summarize(
n = n(),
track = ifelse(n > 1, 'multiple', track)
)
ccsNL <- ccsTalks %>%
select(speakers, track) %>%
group_by(speakers) %>%
summarize(
track = ifelse(n() > 1, 'multiple', track)
)
colorVertices <- ccsNL$track %>%
unique %>%
imap(function(x, i){
temp <- i
names(temp) <- x
temp
}) %>%
do.call(c, .)
set.seed(4321)
ccsG <- graph_from_data_frame(ccsEL, F, ccsNL) %>%
set_edge_attr('width', value = .1) %>%
set_vertex_attr('size', value = 5) %>%
set_vertex_attr("label", value = '') %>%
set_vertex_attr("color", value = colorVertices[V(.)$track] + 1) %>%
set_graph_attr('layout', value = layout_nicely(.))
library(igraph)
set.seed(4321)
ccsG <- graph_from_data_frame(ccsEL, F, ccsNL) %>%
set_edge_attr('width', value = .1) %>%
set_vertex_attr('size', value = 5) %>%
set_vertex_attr("label", value = '') %>%
set_vertex_attr("color", value = colorVertices[V(.)$track] + 1) %>%
set_graph_attr('layout', value = layout_nicely(.))
plot(ccsG, main = "Speakers Connected by Tracks")
ccsTracksEL <- ccsTalks %>%
select(from = track, speakers) %>%
left_join(select(ccsTalks, speakers, to = track)) %>%
filter(from < to) %>%
group_by(from, to) %>%
summarize(
n = n()
)
ccsTracksNL <- ccsTalks %>%
select(speakers, track) %>%
group_by(track) %>%
summarize(
n = n()
)
set.seed(4321)
ccsTracksG <- graph_from_data_frame(ccsTracksEL, F, ccsTracksNL) %>%
set_edge_attr('width', value = 5 * E(.)$n / max(E(.)$n)) %>%
set_vertex_attr('size', value = V(.)$n/max(V(.)$n)*30) %>%
set_vertex_attr("label", value = V(.)$name) %>%
set_vertex_attr("color", value = colorVertices[V(.)$name] + 1) %>%
set_vertex_attr("label.cex", value = .8) %>%
set_graph_attr('layout', value = layout_nicely(.))
plot(ccsTracksG, main = "Tracks Connected by Speakers")
plot(ccsTracksG, main = "Tracks Connected by Speakers")
png('CCS_Talks_Graphs.png', 1200, 600)
par(mfrow(1,2))
par(mfrow=c(1,2))
plot(ccsG, main = "Speakers Connected by Tracks")
plot(ccsTracksG, main = "Tracks Connected by Speakers")
dev.off()
colorVertices
mini_anim
dc_routes_linestrings
dc_routes_linestrings
dc_routes_linestrings
?tm_facets
mini_facet <- tm_shape(dc_routes_linestrings, bbox = dc_bbox) +
tm_lines(col = 'agg',
1,
title.col = '# Bikes',
breaks = c(0, 450, 900, 1350, Inf),
palette = rev(grey.colors(4)),
labels = c('< 450', '< 900', '<1350k', '>1350')) +
tm_facets(by = 'month', free.coords = F, drop.units = T) +
tm_layout(title = "DC Bike Share Routes Over Time", title.size = 1.5)
mini_facet
png('mini_facet.png', 1000, 800)
tm_shape(dc_routes_linestrings, bbox = dc_bbox) +
tm_lines(col = 'agg',
1,
title.col = '# Bikes',
breaks = c(0, 450, 900, 1350, Inf),
palette = rev(grey.colors(4)),
labels = c('< 450', '< 900', '<1350k', '>1350')) +
tm_facets(by = 'month', free.coords = F, drop.units = T) +
tm_layout(title = "DC Bike Share Routes Over Time", title.size = 1.5)
dev.off()
#http://opendata.dc.gov/datasets/a1f7acf65795451d89f0a38565a975b3_5?geometry=-.csv.geojson.geojson
stations <- read_csv('Capital_Bike_Share_Locations.csv') %>%
select(lon = LONGITUDE,
lat = LATITUDE,
name =ADDRESS) %>%
st_as_sf(coords = c('lon', 'lat')) %>%
st_set_crs(4326)
setwd('NCSC_Workspace/')
library(tidyverse)
library(readxl)
hackSheets <- readxl::excel_sheets('Vizathon-Data.xlsx')
hackData <- map(hackSheets, function(x){
read_excel('Vizathon-Data.xlsx', sheet = x)
})
names(hackData) <- hackSheets
map(hackData, names)
nestedCourtData <- hackData$USState %>%
# filter(USStateName %in% c('Connecticut')) %>%
# filter(USStateName %in% c('Connecticut', "District of Columbia", 'Virginia', "Pennsylvania")) %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts')
nestedCourtData
nestedCourtData$Courts[[1]]
nestedCourtData$Courts[[2]]
nestedCourtData$Courts[[3]]
nestedCourtData$Courts[[4]]
nestedCourtData$Courts[[4]]$ParentCourts
nestedCourtData$Courts[[4]]
hackData$AppealProcess
nestedCourtData <- hackData$USState %>%
# filter(USStateName %in% c('Connecticut')) %>%
# filter(USStateName %in% c('Connecticut', "District of Columbia", 'Virginia', "Pennsylvania")) %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts')
hackData$CourtCaseType
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts')
nestedCourtData <- hackData$USState %>%
# filter(USStateName %in% c('Connecticut')) %>%
# filter(USStateName %in% c('Connecticut', "District of Columbia", 'Virginia', "Pennsylvania")) %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts')
nestedCourtDataJSON <- jsonlite::toJSON(nestedCourtData)
write(nestedCourtDataJSON, "nestedCourtData.json")
write(str_c('data = ', nestedCourtDataJSON), 'nestedCourtData.js')
nestedCourtData
nestedCourtData$Courts[[1]]
nestedCourtData$Courts[[1]]$CourtName
nestedCourtData$Courts[[1]]
nestedCourtData$Courts[[1]]$ParentCourts
nestedCourtData <- hackData$USState %>%
# filter(USStateName %in% c('Connecticut')) %>%
# filter(USStateName %in% c('Connecticut', "District of Columbia", 'Virginia', "Pennsylvania")) %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
mutate(Child = ChildCourtID,
Parent = ParentCourts) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts')
nestedCourtData <- hackData$USState %>%
# filter(USStateName %in% c('Connecticut')) %>%
# filter(USStateName %in% c('Connecticut', "District of Columbia", 'Virginia', "Pennsylvania")) %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
mutate(Child = ChildCourtID,
Parent = ParentCourtID) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts')
nestedCourtData$Courts[[1]]$ParentCourts
nestedCourtDataJSON <- jsonlite::toJSON(nestedCourtData)
write(nestedCourtDataJSON, "nestedCourtData.json")
write(str_c('data = ', nestedCourtDataJSON), 'nestedCourtData.js')
nestedCourtData$Courts[[1]]$ParentCourts
nestedCourtData$Courts[[1]]$ParentCourts %>% bind_rows
nestedCourtData$Courts[[1]]
nestedCourtData
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts') %>%
mutate(ChildParent = map(Courts, bind_rows(ParentCourts)))
nestedCourtData <- hackData$USState %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
mutate(Child = ChildCourtID,
Parent = ParentCourtID) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts') %>%
mutate(ChildParent = map(Courts, bind_rows(ParentCourts)))
nestedCourtData <- hackData$USState %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
mutate(Child = ChildCourtID,
Parent = ParentCourtID) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts') %>%
mutate(ChildParent = map(Courts, function(x) bind_rows(x$ParentCourts)))
nestedCourtData
nestedCourtData$ChildParent
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts') %>%
mutate(ChildParent = map(Courts, function(x) select(bind_rows(x$ParentCourts), -ParentCourtID)))
nestedCourtData <- hackData$USState %>%
select(USStateID, USStateName) %>%
left_join(hackData$USStateCourt) %>%
left_join(select(hackData$Court, -DisplayOrder)) %>%
left_join(select(hackData$Funding, FundingID, FundingDescription)) %>%
select(-FundingID) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
left_join(select(hackData$AppealProcess, -AppealProcessID) %>%
mutate_all(function(x) str_c("CourtID_", x)) %>%
mutate(Child = ChildCourtID,
Parent = ParentCourtID) %>%
group_by(ChildCourtID) %>%
nest(.key = 'ParentCourts'),
by=c('CourtID' = 'ChildCourtID')) %>%
left_join(
hackData$CourtCaseType %>%
left_join(select(hackData$CaseType, -DisplayOrder)) %>%
select(-CourtCaseTypeID, -CaseTypeID, -DisplayOrder) %>%
mutate(CourtID = str_c("CourtID_", CourtID)) %>%
group_by(CourtID) %>%
nest(.key = 'CaseTypes')) %>%
filter(!is.na(CourtLevelID)) %>%
mutate(CourtName = str_split(CourtName, ' ')) %>%
group_by(USStateID, USStateName) %>%
nest(.key = 'Courts') %>%
mutate(ChildParent = map(Courts, function(x) select(bind_rows(x$ParentCourts), -ParentCourtID)))
nestedCourtDataJSON <- jsonlite::toJSON(nestedCourtData)
write(nestedCourtDataJSON, "nestedCourtData.json")
write(str_c('data = ', nestedCourtDataJSON), 'nestedCourtData.js')
nestedCourtData$ChildParent
nestedCourtData
nestedCourtData$Courts[[1]]
nestedCourtData$Courts[[1]]$CaseTypes
