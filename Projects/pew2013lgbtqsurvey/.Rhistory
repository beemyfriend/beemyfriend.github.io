countLeft <- 0
layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
if(x == 'center'){
countCenter <<- countCenter + 1
matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
} else if(x == 'left'){
countLeft <<- countLeft + 1
matrix(c(0, countLeft * totN/totLeft), ncol = 2)
} else {
countRight <<- countRight + 1
matrix(c(totN, countRight * totN/totRight), ncol = 2)
}
}) %>%
do.call(rbind, .)
plot(g_lgbt_70_sim,
layout = layout,
vertex.size = 0)
type_df <- tibble(
name = names(degree(g_lgbt_70_sim)),
degree = degree(g_lgbt_70_sim),
type = map_chr(name, function(x,y){
if(str_detect(x, '::bisexual|::esbian')){
'left'
} else if(str_detect(x, '::transgender|::bisexual')) {
'right'
} else {
'center'
}
})
)
g_lgbt_70_sim <- g_lgbt_70_sim %>%
set_vertex_attr('type',
value = type_df$type)
totN <- vcount(g_lgbt_70_sim)
totCenter <- V(g_lgbt_70_sim)[type == 'centr'] %>% length + 1
totRight <- V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
countCenter <- 0
countRight <- 0
countLeft <- 0
layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
if(x == 'center'){
countCenter <<- countCenter + 1
matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
} else if(x == 'left'){
countLeft <<- countLeft + 1
matrix(c(0, countLeft * totN/totLeft), ncol = 2)
} else {
countRight <<- countRight + 1
matrix(c(totN, countRight * totN/totRight), ncol = 2)
}
}) %>%
do.call(rbind, .)
plot(g_lgbt_70_sim,
layout = layout,
vertex.size = 0)
layout
type_df <- tibble(
name = names(degree(g_lgbt_70_sim)),
degree = degree(g_lgbt_70_sim),
type = map_chr(name, function(x,y){
if(str_detect(x, '::gay|::lesbian')){
'left'
} else if(str_detect(x, '::transgender|::bisexual')) {
'right'
} else {
'center'
}
})
)
g_lgbt_70_sim <- g_lgbt_70_sim %>%
set_vertex_attr('type',
value = type_df$type)
totN <- vcount(g_lgbt_70_sim)
totCenter <- V(g_lgbt_70_sim)[type == 'centr'] %>% length + 1
totRight <- V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
countCenter <- 0
countRight <- 0
countLeft <- 0
layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
if(x == 'center'){
countCenter <<- countCenter + 1
matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
} else if(x == 'left'){
countLeft <<- countLeft + 1
matrix(c(0, countLeft * totN/totLeft), ncol = 2)
} else {
countRight <<- countRight + 1
matrix(c(totN, countRight * totN/totRight), ncol = 2)
}
}) %>%
do.call(rbind, .)
plot(g_lgbt_70_sim,
layout = layout,
vertex.size = 0)
totCenter <- V(g_lgbt_70_sim)[type == 'center'] %>% length + 1
V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
type_df <- tibble(
name = names(degree(g_lgbt_70_sim)),
degree = degree(g_lgbt_70_sim),
type = map_chr(name, function(x,y){
if(str_detect(x, '::gay|::lesbian')){
'left'
} else if(str_detect(x, '::transgender|::bisexual')) {
'right'
} else {
'center'
}
})
)
g_lgbt_70_sim <- g_lgbt_70_sim %>%
set_vertex_attr('type',
value = type_df$type)
totN <- vcount(g_lgbt_70_sim)
totCenter <- V(g_lgbt_70_sim)[type == 'center'] %>% length + 1
totRight <- V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
countCenter <- 0
countRight <- 0
countLeft <- 0
layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
if(x == 'center'){
countCenter <<- countCenter + 1
matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
} else if(x == 'left'){
countLeft <<- countLeft + 1
matrix(c(0, countLeft * totN/totLeft), ncol = 2)
} else {
countRight <<- countRight + 1
matrix(c(totN, countRight * totN/totRight), ncol = 2)
}
}) %>%
do.call(rbind, .)
plot(g_lgbt_70_sim,
layout = layout,
vertex.size = 0)
type_df <- tibble(
name = names(degree(g_lgbt_70_sim)),
degree = degree(g_lgbt_70_sim),
type = map_chr(name, function(x,y){
if(str_detect(x, '::gay|::lesbian')){
'left'
} else if(str_detect(x, '::transgender|::bisexual')) {
'right'
} else {
'center'
}
})
)
g_lgbt_70_sim <- g_lgbt_70_sim %>%
set_vertex_attr('type',
value = type_df$type)
totN <- vcount(g_lgbt_70_sim)
totCenter <- V(g_lgbt_70_sim)[type == 'center'] %>% length + 1
totRight <- V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
countCenter <- 0
countRight <- 0
countLeft <- 0
layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
if(x == 'center'){
countCenter <<- countCenter + 1
matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
} else if(x == 'left'){
countLeft <<- countLeft + 1
matrix(c(0, countLeft * totN/totLeft), ncol = 2)
} else {
countRight <<- countRight + 1
matrix(c(totN, countRight * totN/totRight), ncol = 2)
}
}) %>%
do.call(rbind, .)
plot(g_lgbt_70_sim,
layout = layout,
vertex.size = 0,
vertex.label.cex = .9
)
type_df <- tibble(
name = names(degree(g_lgbt_70_sim)),
degree = degree(g_lgbt_70_sim),
type = map_chr(name, function(x,y){
if(str_detect(x, '::gay|::lesbian')){
'left'
} else if(str_detect(x, '::transgender|::bisexual')) {
'right'
} else {
'center'
}
})
)
g_lgbt_70_sim <- g_lgbt_70_sim %>%
set_vertex_attr('type',
value = type_df$type)
totN <- vcount(g_lgbt_70_sim)
totCenter <- V(g_lgbt_70_sim)[type == 'center'] %>% length + 1
totRight <- V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
countCenter <- 0
countRight <- 0
countLeft <- 0
layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
if(x == 'center'){
countCenter <<- countCenter + 1
matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
} else if(x == 'left'){
countLeft <<- countLeft + 1
matrix(c(0, countLeft * totN/totLeft), ncol = 2)
} else {
countRight <<- countRight + 1
matrix(c(totN, countRight * totN/totRight), ncol = 2)
}
}) %>%
do.call(rbind, .)
plot(g_lgbt_70_sim,
layout = layout,
vertex.size = 0,
vertex.label.cex = .8,
vertex.label.font = 2
)
tN <- c("Q102A1", "Q102B1", "Q102C1", "Person1", "Person2")
g <- make_empty_graph(directed = F) +
vertices(
tN,
color = c(rep('pink', 3), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 3), rep(0, 2)),
labe.font = 2
) +
edges(
c(tN[1], tN[4],
tN[2], tN[5],
tN[3], tN[4],
tN[1], tN[5],
tN[1], tN[2],
tN[1], tN[3],
tN[2], tN[3]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answr", 3)),
width = 4
)
layout = matrix(
c(1, 3,
5, 1,
5, 5,
3, 2,
3, 4),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_person']} %>%
plot(layout = layout)
tN <- c("Q102A1", "Q102B1", "Q102C1", "Person1", "Person2")
g <- make_empty_graph(directed = F) +
vertices(
tN,
color = c(rep('pink', 3), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 3), rep(0, 2)),
labe.font = 2
) +
edges(
c(tN[1], tN[4],
tN[2], tN[5],
tN[3], tN[4],
tN[1], tN[5],
tN[1], tN[2],
tN[1], tN[2],
tN[1], tN[3],
tN[2], tN[3]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answer", 4)),
width = 4
)
layout = matrix(
c(1, 3,
5, 1,
5, 5,
3, 2,
3, 4),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_answer']} %>%
plot(layout = layout)
tN <- c("Q102A1", "Q102B1", "Person1", "Person2")
g <- make_empty_graph(directed = F) +
vertices(
tN,
color = c(rep('pink', 3), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 3), rep(0, 2)),
labe.font = 2
) +
edges(
c(tN[1], tN[3],
tN[2], tN[3],
tN[1], tN[4],
tN[2], tN[4],
tN[1], tN[2],
tN[1], tN[2]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answer", 2)),
width = 4
)
layout = matrix(
c(1, 2,
3, 2,
2, 3,
2, 1),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_answer']} %>%
plot(layout = layout)
tN <- c("Q102A1", "Q102B1", "Person1", "Person2")
g <- make_empty_graph(directed = F) +
vertices(
tN,
color = c(rep('pink', 2), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 3), rep(0, 2)),
labe.font = 2
) +
edges(
c(tN[1], tN[3],
tN[2], tN[3],
tN[1], tN[4],
tN[2], tN[4],
tN[1], tN[2],
tN[1], tN[2]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answer", 2)),
width = 4
)
layout = matrix(
c(1, 2,
3, 2,
2, 3,
2, 1),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_answer']} %>%
plot(layout = layout)
g %>%
{. - E(.)[!type =='answer_answer']} %>%
plot(layout = layout,
vertex.size = V(.)$size2,
edge.curved = T)
tN <- c("Q102A1", "Q102B1", "Person1", "Person2")
tN2 <- c("Q102A1", "Q102B1", '', '')
g <- make_empty_graph(directed = F) +
vertices(
tN,
color = c(rep('pink', 2), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 2), rep(0, 2)),
label.font = 2
) +
edges(
c(tN[1], tN[3],
tN[2], tN[3],
tN[1], tN[4],
tN[2], tN[4],
tN[1], tN[2],
tN[2], tN[1]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answer", 2)),
width = 4
)
layout = matrix(
c(1, 2,
3, 2,
2, 3,
2, 1),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_answer']} %>%
plot(layout = layout)
g %>%
{. - E(.)[!type =='answer_answer']} %>%
plot(layout = layout,
vertex.size = V(.)$size2,
edge.curved = T,
vertex.label = tN2)
g
plot(g)
E(g)
E(g)[[]]
tN <- c("Q102A1", "Q102B1", "Person1", "Person2")
tN2 <- c("Q102A1", "Q102B1", '', '')
g <- make_empty_graph(directed = F) +
vertices(
tN,
color = c(rep('pink', 2), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 2), rep(0, 2)),
label.font = 2
) +
edges(
c(tN[1], tN[3],
tN[2], tN[3],
tN[1], tN[4],
tN[2], tN[4],
tN[1], tN[2],
tN[2], tN[1]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answer", 2)),
width = 4
)
layout = matrix(
c(1, 2,
3, 2,
2, 3,
2, 1),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_answer']} %>%
plot(layout = layout)
g %>%
{. - E(.)[!type =='answer_answer']} %>%
plot(layout = layout,
vertex.size = V(.)$size2,
edge.curved = T,
vertex.label = tN2)
g %>%
{. - E(.)[type !='answer_answer']} %>%
{print(g); .} %>%
plot(layout = layout,
vertex.size = V(.)$size2,
edge.curved = T,
vertex.label = tN2)
g %>%
{. - E(.)[type !='answer_answer']} %>%
{print(.); .} %>%
plot(layout = layout,
vertex.size = V(.)$size2,
edge.curved = T,
vertex.label = tN2)
tN <- c("Q102A1", "Q102B1", "Person1", "Person2")
tN2 <- c("Q102A1", "Q102B1", '', '')
g <- make_empty_graph(directed = T) +
vertices(
tN,
color = c(rep('pink', 2), rep('skyblue', 2)),
size = 30,
size2 = c(rep(30, 2), rep(0, 2)),
label.font = 2
) +
edges(
c(tN[1], tN[3],
tN[2], tN[3],
tN[1], tN[4],
tN[2], tN[4],
tN[1], tN[2],
tN[2], tN[1]),
lty = 1,
type = c(rep("answer_person", 4), rep("answer_answer", 2)),
width = 4,
arrow.size = 0
)
layout = matrix(
c(1, 2,
3, 2,
2, 3,
2, 1),
ncol = 2,
byrow = T)
g %>%
{. - E(.)[type == 'answer_answer']} %>%
plot(layout = layout)
g %>%
{. - E(.)[type !='answer_answer']} %>%
{print(.); .} %>%
plot(layout = layout,
vertex.size = V(.)$size2,
edge.curved = T,
vertex.label = tN2)
get_sub <- function(g, str_filt, cutoff, type){
g %>%
filterForQuestion(str_filt) %>%
{
poi <- V(.)[str_detect(name, '^ID_')]$name
g - E(g)[!poi %--% V(g)]
}  %>%
{. - V(.)[degree(.) == 0]} %>%
projectForType('answer') %>%
{
totP <<- V(.)[str_detect(name, '^ID_')] %>% length
.
} %>%
{. - V(.)[percDegree < cutoff]} %>%
filterForQuestion(str_filt) %>%
set_edge_attr('percTot', value = E(.)$weight/totP) %>%
set_edge_attr('type', value = type) %>%
as_data_frame()
}
trans <- get_sub(g, 'LGBT::transgender', .7, 'transgender')
gay <- get_sub(g, 'LGBT::gay', .7, 'gay')
bisexual <- get_sub(g, 'LGBT::bisexual', .7, 'bisexual')
lesbian <- get_sub(g, 'LGBT::lesbian', .7, 'lesbian')
lgbt <- list(trans, gay, bisexual, lesbian) %>%
bind_rows()
g_lgbt_70 <- graph_from_data_frame(lgbt, F)
?knitr::include_graphics
tempfile
tempfile()
dir()
