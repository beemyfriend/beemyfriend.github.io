2013 PEW LGBTQ Survey ...but as a graph
========================================================
author: Benjamin Ortiz Ulloa
date: 
autosize: true

<style>
.small-code pre code {
  font-size: 1.15em;
}

.extra-small-code pre code {
font-size: 1em
}

.myTable td {  /* Table  */
  font-size: 17px;
}

normal-text ol {
  font-size: 10px
}
</style>


What's a Graph?
========================================================

```{r, echo=F, fig.width = 15, fig.height = 10}
library(tidyverse)
library(igraph)
library(igraphdata)
g <- make_empty_graph(directed = T) +
  vertices(
    c('Thing', 'Node', 'Vertex'),
    label.cex = 1.35,
    label.font = 2
  ) +
  edges(
    c("Thing", "Node",
      "Node", "Vertex",
      "Vertex", "Thing",
      "Vertex", "Node"),
    show = c(1, 2, 3),
    label = c("Relationship", "Link", "Edge", "Another Edge"),
    label.cex = 1.35,
    label.font = 2
  )

layout = matrix(c(2, 3, 1, 1, 3, 1), ncol = 2, byrow = T)

g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.label = sapply(V(g)$name, function(x){if_else(x %in% c('Thing'), x, '')}),
    vertex.size = sapply(V(g)$name, function(x){if_else(x %in% c('Thing'), 45, 0)}),
    edge.width = 5
  )
```

What's a Graph?
========================================================

```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.label = sapply(V(g)$name, function(x){if_else(x %in% c('Node', 'Thing'), x, '')}),
    vertex.size = sapply(V(g)$name, function(x){if_else(x %in% c('Node', 'Thing'), 45, 0)})
  )
  
```

What's a Graph?
========================================================

```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.size= 45
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[!label %in% c("Relationship")]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[!label %in% c("Relationship", 'Link')]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[label %in% c("Another Edge")]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph? - Relationships can have direction
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[label %in% c("Another Edge")]} %>%
  plot(
    layout = layout,
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

What's a Graph? - Multiple relationships are possible
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

What's a Graph? - Everything can have attributes
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.label = str_c(V(.)$name, 'attr', sep ='\n'),
    edge.label = str_c(E(.)$label, 'attr', sep = '\n'),
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

What's a Graph? - Attributes can be visualized
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.size = c(30, 45, 60),
    vertex.color = c('orange', 'lightblue', 'pink'),
    edge.width = c(2, 10, 20, 5),
    vertex.label = str_c(V(.)$name, 'attr', sep ='\n'),
    edge.label = str_c(E(.)$label, 'attr', sep = '\n'),
    edge.lty = c(1, 6, 5, 2),
    edge.arrow.size = 3,
    vertex.shape = c('circle', 'square', 'circle')
  )
```

Why graph? Social Network Analysis
=========
```{r, echo = F, fig.width = 15, fig.height = 10}
data("karate")
plot(
  karate,
  main = 'Wayne W. Zachary\nAn Information Flow Model for Conflict and Fission in Small Groups. \nJournal of Anthropological Research Vol. 33, No. 4 452-473', 
  sub = 'Zachary studied conflict and fission in this network,\n as the karate club was split into two separate clubs, after long disputes between two factions of the club,\n one led by John A., the other by Mr. Hi.'
)
rm(karate)
```

Why graph? Maps, paths, and supply chains
========
```{r echo = F, fig.width = 15, fig.height = 10}
data("Koenigsberg")
plot(Koenigsberg,
     main = "Leonhard Euler\nThe Seven Bridges of Koenigsberg",
     sub = "Find a walk through the city that would cross each bridge once and only once.\nEuler proved that the problem has no solution.",
       vertex.size= 45,
       edge.width = 5,
     vertex.label.cex = 1.35,
     vertex.label.font = 2
     )
rm(Koenigsberg)
```

Why graph? Recommendation Systems
==========
```{r, echo = F, fig.width = 15, fig.height = 10}
g <- make_empty_graph(directed = F) +
  vertices(
    c("Person1", "Person2", "Person3", "Object1", "Object2", "Object3", "Object4", "Object5"),
    color = c(rep('pink', 3), rep('lightblue', 5)),
    label.cex = 1.35,
    size = 45,
    label.font = 2
  ) + 
  edges(
    c("Person1", "Object2",
      "Person2", "Object2",
      "Person1", "Object3",
      "Person2", "Object3",
      "Person1", "Object4",
      "Person3", "Object4",
      "Person2", "Object1",
      "Person3", "Object5",
      "Person1", "Person2",
      "Person1", "Person2",
      "Person1", "Person3"),
    lty = 1,
    type = c(rep("person_object", 8), rep("person_person", 3)), 
    color = 'lightgrey'
  )

layout = matrix(
  c(1, 4,
    8, 5,
    8, 3,
    4, 6,
    4, 5,
    4, 4,
    4, 3,
    4, 2),
  ncol = 2, 
  byrow = T)

g %>%
  {. - E(.)[type == 'person_person']} %>%
  plot(layout = layout,
       edge.width = 5)
```

Why graph? Recommendation Systems
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[type == 'person_object']} %>%
  plot(
    layout = layout,
    vertex.size = sapply(V(.)$name, function(x){if_else(str_detect(x, 'Object'), 0, 45)}),
    vertex.label = sapply(V(.)$name, function(x){if_else(str_detect(x, 'Object'), '', x)}),
    edge.width= 5
  )
```

Why graph? Recommendation Systems
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[type == 'person_person']} %>%
  {. + edges(c("Person1", "Object1"), type = "person_object", lty = 2, color = 'gold')} %>%
  plot(layout = layout,
       edge.width = 5)
```

Data
======
Online survey of self-identified lesbian, gay, bisexual and transgender adults in the U.S., ages 18 or older. 

Sample sizes:
+  Full sample =1,197
+  Gay men n=398
+  Lesbians n=277
+  Bisexuals n=479
+  Transgender adults n=43

[http://www.pewsocialtrends.org/2014/09/18/2013-survey-of-lgbt-adults/]()

Data
==== 
class:small-code
It's a `.sav`  file (SPSS), but luckily the **foreign** package in **R** can import it painlessly. 

```{r, eval = F}
foreign::read.spss('pew2013lgbtpublicdatarelease.sav') %>%
  as.tibble() -> survey
```

```{r, echo = F}
foreign::read.spss('pew2013lgbtpublicdatarelease.sav 7.19.19 AM') %>%
  as.tibble() -> survey
```

Data
====
```{r, echo = F}
dim(survey)
knitr::kable(survey[,1:7])
```

Converting to Graph Data - Overview
=======
```{r, echo = F, fig.width = 13, fig.height = 10}
(make_empty_graph(directed = F) +
  vertices(
    c('Person', 'Answer', '', ''),
    color = c('skyblue', 'pink', 'blue', 'pink'),
    size = c(45, 45, 0, 0),
    label.cex = 1.35
  ) +
  edges(
    c("Person", "Answer"),
    label = c("Question"),
    width = 5,
    label.cex = 1.35
  ) )%>%
  plot(layout = matrix(c(1, 2, 3, 2, 2, 1, 2, 3), ncol = 2, byrow = T), asp = 0)
```

Converting to Graph Data - Overview
========
class:normal-text
**Main Task:** Create 2 Data Frames

1. Node List **(not required)**:
    - First Column must be the unique names/id of the nodes
    - Every subsequent column is a node attribute
    - Only required if the graph has node attributes
2. Edge List **(required!)**:
    - First column must be the name/id of the source node (the tail of the edge)
    - Second column must be the name/id of the target node (the head of the edge)
    - Every subsequent column is an edge attribute
    
Converting to Graph Data - Edge List
=====
class:small-code

```{r}
links <- survey %>%
  mutate(NEWCASEID = str_c("ID_", NEWCASEID)) %>%
  gather(question, answer, -NEWCASEID) %>%
  unite(answer, question, answer, sep = '::') %>%
  mutate(type = "person_answer")
```

Converting to Graph Data - Edge List
======
class:extra-small-code

```{r, echo = F}
links %>% sample_n(10)
```
    
Converting to Graph Data - Node List
=====
class:small-code
```{r}
nodes <- rbind(
  tibble(
    name = links$NEWCASEID %>% unique,
    type = 'person'
  ),
  tibble(
    name = links$answer %>% unique,
    type = 'answer'
  )
)
```

Converting to Graph Data - Node List
======
class:extra-small-code
```{r, echo = F}
nodes %>% sample_n(10)
```

Converting to Graph Data - The Graph!!
=====
class:small-code
```{r}
g <- graph_from_data_frame(d = links, 
                           directed = F,
                           vertices = nodes)
g
```

Converting to Graph Data - The Graph is too big!!!
====
```{r, eval = F, echo = F }
pdf('fullSurveyGraph.png', width=12, height = 10)
ggraph(g) +
  geom_edge_link(alpha = .01) +
  geom_node_point(aes(color=type)) +
  theme_void()
dev.off()
```

!['fullSurveyGraph.png'](fullSurveyGraph.png)

Subgraph - Filter the Graph down!!!
=====
```{r, echo = F, fig.width = 15, fig.height = 10}
tN <- c( 'LGBT::Lesbian', 'LGBT::Bisexual','LGBT::Gay', 'LGBT::Transgender',
       "Person1", "Person2", "Person3", "Person4", "Person5",
       "Answer1", "Answer2", "Answer3", "Answer4", "Answer5", "Answer6", "Answer7")
tempG <- make_empty_graph(directed = F) +
  vertices(
    tN,
    color = c(rep('pink', 4), rep('skyblue', 5), rep('pink', 7)),
    size = c(rep(30, 4), rep(25, 5), rep(20, 7)),
    label.cex = 1.25,
    label.font = 2,
    color2 = c(rep(rgb(255,192,203, 10, maxColorValue = 255), 2), 
               rgb(255,192, 203, maxColorValue = 255), 
               rgb(255,192,203, 10, maxColorValue = 255),
               rep(rgb(135, 206, 235, 10, maxColorValue = 255), 3),
               rgb(135, 206, 235, maxColorValue = 255),
               rgb(135, 206, 235, 10, maxColorValue = 255), 
               rep(rgb(255,192,203, 10, maxColorValue = 255), 3),
               rep(rgb(255,192,203, maxColorValue = 255), 2),
               rgb(255,192,203, 10, maxColorValue = 255),
               rgb(255,192,203, maxColorValue = 255)
               )
  ) +
  edges(
    c(tN[1], tN[5],
      tN[2], tN[6],
      tN[2], tN[7],
      tN[3], tN[8],
      tN[4], tN[9],
      tN[5], tN[10],
      tN[5], tN[13],
      tN[5], tN[14],
      tN[6], tN[11],
      tN[6], tN[15],
      tN[7], tN[12],
      tN[7], tN[15],
      tN[8], tN[16],
      tN[8], tN[13],
      tN[8], tN[14],
      tN[9], tN[12], 
      tN[9], tN[15]),
    color2 = c(
      rep(rgb(0, 0, 0, .1), 3),
      rgb(0, 0, 0, .6),
      rep(rgb(0, 0, 0, .1), 8),
      rep(rgb(0, 0, 0, .6), 3),
      rep(rgb(0, 0, 0, .1), 2)
      
    ),
    width = 5
  ) 

layout = layout = matrix(
  c(
    c(
      rep(4, 4), rep(8, 5), rep(12, 7),
      1:4 * 16/5), c(1:5 * 16/6), c(1:7 * 16/8)
    ),
  ncol = 2
  )

tempG %>%
  plot(layout=layout, asp = 0)
```

Subgraph - Filter the graph down!!!
=====
```{r, echo = F, fig.width=15, fig.height = 10}
tempG %>%
  plot(layout=layout, 
       asp = 0, 
       vertex.color = V(.)$color2,
       edge.color = E(.)$color2
       )
```

Subgraph - Just Gay Males 
========
class:small-code

```{r, fig.width = 13, fig.height = 10}
filterForGroup <- function(g, strFilt){
  g %>%
  {. - E(.)[!V(.)[str_detect(V(.)$name, '^ID_')] %--% V(.)[str_detect(V(.)$name, strFilt)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  {V(.)[str_detect(name, '^ID_')]$name} %>%
  {g - E(g)[!. %--% V(g)]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  {. - V(.)[str_detect(name, '^weight')]} %>% 
  {. - V(.)[str_detect(name, '^duration')]} %>%
  {. - V(.)[str_detect(name, '::NA$')]} 
}
justGay <-  filterForGroup(g, 'LGBT::gay')
````
  
Subgraph - Just Gay Males. Still too big!!!
=====
```{r, echo = F, fig.width = 15, fig.height = 10}
counterA <<- 0
counterP <<- 0
counterMA <<- 0
nA <<- length(V(justGay)[!str_detect(name, '^ID_')]) - 1
nP <<- length(V(justGay)[str_detect(name, '^ID_')])
totN <<- nA + nP + 1
    
layout = lapply(V(justGay)$name, function(x){
  if(str_detect(x, '^LGBT::')){
      counterMA <<- counterMA + 1
      matrix(c(counterMA * (totN/2), totN), ncol = 2)
    } else if(str_detect(x, '^ID_')){
      counterP <<- counterP + 1
      matrix(c(counterP * (totN/nP), totN * 3/4), ncol = 2)
    } else {
      counterA <<- counterA + 1
      matrix(c(counterA * (totN/nA), 1), ncol = 2)
    }
  }) %>%
  do.call(rbind, .)
    
plot(
  justGay, 
  asp = 0,
  layout = layout,
  vertex.label = sapply(V(justGay)$name, function(x){if_else(str_detect(x, '^LGBT::gay'), x, '')}),
    vertex.size = 3,
    edge.color = rgb(0, 0, 0, max = 255, alpha = 5),
    vertex.color = rgb(249, 156, 2, max = 255, alpha = 127),
  vertex.label.cex = 1.35,
  vertex.label.font = 2
  )
  
```


Subgraph - Question 102
=====

**102(a|b|c|d): Which Statement comes closer to your own views - even if neither is exatly right?**

<table class='myTable'>
<tr>
  <th>
    Q.
  </th>
  <th>
    A1.
  </th>
  <th>
    A2
  </th>
</tr>
<tr>
  <td>
    A
  </td>
  <td>
    The push for same-sex marriage has taken too much focus away from other issues important to LGBT people
  </td>
  <td>
    Same-sex marriage should be the top priority for LGBT people right now, even if this means some other issues do not get much attention
  </td>
</tr>
<tr>
  <td>
    B
  </td>
  <td>
    The best way to achieve equality is for LGBT people to be a part of mainstream culture and institutions like marriage
  </td>
  <td>
    LGBT people should be able to achieve equality while still maintaining their own distinct culture and way of life 
  </td>
</tr>
<tr>
  <td>
    C
  </td>
  <td>
    I dont want to be seen as different because of my (sexual orientation)/(gender identity)
  </td>
  <td>
    My (sexual orientation)/(gender identity) makes me different from other people, and I am comfortable with that.
  </td>
</tr>
<tr>
  <td>
    D
  </td>
  <td>
    It is important to maintain places like LGBT neighborhoods and gay and lesbian bars
  </td>
  <td>
    These types of places will not be important as LGBT people are more accepted into society
  </td>
</tr>
</table>

Subgraph - Question 102 Filtered
=====
class:small-code

```{r}
filterForQuestion <- function(g, strFilt){
  filteredItem <- V(g)[str_detect(V(g)$name, strFilt)]
  g %>%
    {. - E(.)[!V(.) %--% filteredItem]} %>%
    {. - V(.)[degree(.) == 0]}
}

justGay102 <- filterForQuestion(justGay, '^Q102')
```

Subgraph - Question 102 Filtered
====
```{r, echo = F,  fig.width = 15, fig.height = 10}
justGay102 %>%
  {
    totN <<- vcount(.)
    counterA <<- 0
    counterP <<- 0
    nA <<- length(V(.)[!str_detect(name, '^ID_')]) 
    nP <<- length(V(.)[str_detect(name, '^ID_')])
    
    layout = lapply(V(.)$name, function(x){
      if(str_detect(x, '^ID_')){
        counterP <<- counterP + 1
        matrix(c(totN, counterP * (totN/nP)), ncol = 2)
      } else {
        counterA <<- counterA + 1
        matrix(c(1, counterA * (totN/nA)), ncol = 2)
      }
    }) %>%
      do.call(rbind, .)
    
    plot(
      ., 
      layout = layout,
      vertex.label = sapply(V(.)$name, function(x){if_else(str_detect(x, '^Q'), x, '')}),
      vertex.color = sapply(V(.)$name, function(x){if_else(str_detect(x, '^Q'), 'pink', 'lightblue')}),
      vertex.label.cex = 1.35,
      edge.color = rgb(0, 0, 0, max = 255, alpha = 10),
      vertex.label.font = 2,
      vertex.size = 10
    )
  }
```

Subgraph - Projection
====
```{r, echo = F, fig.width = 15, fig.height = 10}
tN <- c("Q102A1", "Q102B1", "Person1", "Person2")
tN2 <- c("Q102A1", "Q102B1", '', '')
gT <- make_empty_graph(directed = T) +
  vertices(
    tN,
    color = c(rep('pink', 2), rep('skyblue', 2)),
    size = 45,
    size2 = c(rep(45, 2), rep(0, 2)),
    label.font = 2,
    label.cex = 1.35
  ) + 
  edges(
    c(tN[1], tN[3],
      tN[2], tN[3],
      tN[1], tN[4],
      tN[2], tN[4],
      tN[1], tN[2],
      tN[2], tN[1]),
    lty = 1,
    type = c(rep("answer_person", 4), rep("answer_answer", 2)),
    width = 4,
    arrow.size = 0
  )

layout = matrix(
  c(1, 2,
    3, 2,
    2, 3,
    2, 1),
  ncol = 2, 
  byrow = T)

gT %>%
  {. - E(.)[type == 'answer_answer']} %>%
  plot(layout = layout)
```

Subgraph - Projection
====
```{r, echo = F, fig.width = 15, fig.height = 10}
gT %>%
  {. - E(.)[type =='answer_person']} %>%
  plot(layout = layout,
       vertex.size = V(.)$size2,
       edge.curved = T,
       vertex.label = tN2)
```

Subgraph - Question 102 Projected
=======
class:extra-small-code
```{r}
projectForType <- function(g, strType){
  g %>%
    set_vertex_attr('type', 
                    value = sapply(V(.)$type, function(x){
                      x == strType
                    })) %>%
    set_vertex_attr('degree',
                    value = degree(.)) %>% 
    set_vertex_attr('percDegree',
                    value = degree(.)/vcount(g - V(g)[type == strType])) %>%
    bipartite_projection() %>%
    .[[2]] %>%
    set_vertex_attr('strength', value = strength(.)) %>%
    set_edge_attr('percStrength', value = E(.)$weight/vcount(g - V(g)[type == strType]))
}

justGay102Answers <- projectForType(justGay102, 'answer')

```

Subgraph - Answers have relationships
=======

```{r, echo = F, fig.width = 15, fig.height = 10}
justGay102Answers %>%
  {
    layout <- matrix(
      c(1, 1, 1,
        4, 8,
        11, 11, 11,
        6, 3, 9,
        5, 3, 7,
        1, 1.4,
        6, 4, 8,
        10.4, 11, 10.7
        ),
      ncol = 2
    )

    plot(
      .,
      layout = layout,
      edge.width = 25 * (E(.)$weight/max(E(.)$weight)),
      vertex.size = 40 * (V(.)$strength/max(V(.)$strength)),
      vertex.label.cex = 1,
      vertex.label.font= 2,
      edge.color = rgb(0, 0, 0, max = 255, alpha = 100)
    )
  }
```

Subgraph - Statistics Change if the Relationships Change
====
```{r, echo = F, fig.width = 15, fig.height = 10}
justGay102 %>%
  {. - E(.)[!V(.) %--% V(.)[str_detect(name, 'Q102C::My')]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  {V(.)[str_detect(name, 'ID_')]$name} %>%
  {justGay102 - E(justGay102)[!V(justGay102) %--% .]} %>%
  {. - V(.)[(str_detect(name, 'ID_')) & (degree(.) == 0)]} %>%
  projectForType('answer') %>%
  {
    layout <- matrix(
      c(1, 1, 1,
        4, 8,
        11, 11, 11,
        6, 3, 9,
        5, 3, 7,
        1, 1.4,
        6, 4, 8,
        10.4, 11, 10.7
        ),
      ncol = 2
    )

    plot(
      .,
      layout = layout,
      edge.width = 25 * (E(.)$weight/max(E(.)$weight)),
      vertex.size = 40 * (V(.)$strength/max(V(.)$strength)),
      vertex.label.cex = 1,
      vertex.label.font= 2,
      edge.color = rgb(0, 0, 0, max = 255, alpha = 100)
    )
  }
```

Summary of Vertices - They're just vectors 
=====
class:extra-small-code

```{r, eval = F, fig.width = 13}
justGay102Summary <- tibble(
  answer = V(justGay102Answers)$name,
  people = V(justGay102Answers)$degree
) %>%
  separate(answer, c('question', 'answer'), '::') %>%
  arrange(people) %>%
  mutate(answer = factor(answer, 
                         c('Refused', .$answer %>% .[. != 'Refused'])))

ggplot(justGay102Summary) +
  geom_col(aes(answer, people)) +
  coord_flip() +
  facet_grid(question~., drop = T, scales='free_y')
```


Summary of Vertices - They're just vectors
=====

```{r, echo = F, fig.width = 13}
q102summary <- tibble(
  answer = V(justGay102Answers)$name,
  people = V(justGay102Answers)$degree
) %>%
  separate(answer, c('question', 'answer'), '::') %>%
  arrange(people) %>%
  mutate(answer = factor(answer, c('Refused', .$answer %>% .[. != 'Refused'])))

ggplot(q102summary) +
  geom_col(aes(answer, people)) +
  coord_flip() +
  facet_grid(question~., drop = T, scales='free_y')
```

Get all LGBT sugbraphs
======
class:small-code

```{r, results='hide'}
get_sub <- function(g, str_filt, cutoff, type){
  g %>%
    filterForQuestion(str_filt) %>%
    {
      poi <- V(.)[str_detect(name, '^ID_')]$name
      g - E(g)[!poi %--% V(g)]
    }  %>%
    {. - V(.)[degree(.) == 0]} %>%
    projectForType('answer') %>%
    {
      totP <<- V(.)[str_detect(name, '^ID_')] %>% length
      .
    } %>%
    {. - V(.)[percDegree < cutoff]} %>%
    filterForQuestion(str_filt) %>%
    set_edge_attr('percTot', value = E(.)$weight/totP) %>%
    set_edge_attr('type', value = type) %>%
    as_data_frame()
}
```

Get all LGBT subgraphs
======
class:small-code

```{r}
trans <- get_sub(g, 'LGBT::transgender', .7, 'transgender')
gay <- get_sub(g, 'LGBT::gay', .7, 'gay')
bisexual <- get_sub(g, 'LGBT::bisexual', .7, 'bisexual')
lesbian <- get_sub(g, 'LGBT::lesbian', .7, 'lesbian')

lgbt <- list(trans, gay, bisexual, lesbian) %>%
  bind_rows()

g_lgbt_70 <- graph_from_data_frame(lgbt, F)
```

Similarities
====
class:small-code
```{r}
only_common <- g_lgbt_70 %>%
  {. - V(.)[str_detect(name, "::NA$")]} %>%
  set_vertex_attr('degree',
                  value = degree(.)) %>%
  {. - V(.)[str_detect(name, '^LGBT')]} %>%
  {. - V(.)[degree < 4]} %>%
  {V(.)$name} %>%
  c(V(g_lgbt_70)[str_detect(name, '^LGBT')]$name)

g_lgbt_70_sim <- g_lgbt_70 %>% 
  {. - V(.)[!name %in% only_common]} 
```

Similarities
====
```{r, echo = F, fig.width = 15, fig.height = 10}
type_df <- tibble(
  name = names(degree(g_lgbt_70_sim)),
  degree = degree(g_lgbt_70_sim),
  type = map_chr(name, function(x,y){
    if(str_detect(x, '::gay|::lesbian')){
      'left'
    } else if(str_detect(x, '::transgender|::bisexual')) {
      'right'
    } else {
      'center'
    }

  })
)

g_lgbt_70_sim <- g_lgbt_70_sim %>%
  set_vertex_attr('type', 
                  value = type_df$type)

totN <- vcount(g_lgbt_70_sim)
totCenter <- V(g_lgbt_70_sim)[type == 'center'] %>% length + 1
totRight <- V(g_lgbt_70_sim)[type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_sim)[type == 'left'] %>% length + 1
countCenter <- 0
countRight <- 0
countLeft <- 0

layout <- lapply(V(g_lgbt_70_sim)$type, function(x){
  if(x == 'center'){
    countCenter <<- countCenter + 1
    matrix(c(totN/2, countCenter * totN/totCenter), ncol = 2)
  } else if(x == 'left'){
    countLeft <<- countLeft + 1
    matrix(c(0, countLeft * totN/totLeft), ncol = 2)
  } else {
    countRight <<- countRight + 1
    matrix(c(totN, countRight * totN/totRight), ncol = 2)
  }
}) %>%
  do.call(rbind, .)

plot(g_lgbt_70_sim,
     layout = layout,
     vertex.size = 0,
     vertex.label.cex = 1.25,
     vertex.label.font = 2
     )
```


Dissimilarities
=====
class:small-code

```{r}
remove_common <- g_lgbt_70 %>%
  {. - V(.)[str_detect(name, "::NA$")]} %>%
  set_vertex_attr('degree', 
                  value = degree(.)) %>%
  {. - V(.)[str_detect(name, '^LGBT')]} %>%
  {. - V(.)[degree > 2]} %>%
  {V(.)$name} %>% 
  c(V(g_lgbt_70)[str_detect(name, '^LGBT')]$name)


g_lgbt_70_dis <- g_lgbt_70 %>% 
  {. - V(.)[!name %in% remove_common]} 
```

Dissimilarities
=====
```{r, echo = F, fig.width=15, fig.height = 10}
type_df <- tibble(
  name = names(degree(g_lgbt_70_dis)),
  degree = degree(g_lgbt_70_dis),
  type = map2_chr(name, degree, function(x,y){
    if(str_detect(x, '^LGBT')){
      'LGBT'
    } else if(y > 1) {
      'right'
    } else {
      'left'
    }

  })
)

g_lgbt_70_dis <- g_lgbt_70_dis %>%
  set_vertex_attr('type', 
                  value = type_df$type)

totN <- vcount(g_lgbt_70_dis)
totLGBT <- V(g_lgbt_70_dis)[str_detect(name, '^LGBT')] %>% length + 1
totRight <- V(g_lgbt_70_dis)[!str_detect(name, '^LGBT')][type == 'right'] %>% length + 1
totLeft <- V(g_lgbt_70_dis)[!str_detect(name, '^LGBT')][type == 'left'] %>% length + 1
countLGBT <- 0
countRight <- 0
countLeft <- 0

layout <- lapply(V(g_lgbt_70_dis)$type, function(x){
  if(x == 'LGBT'){
    countLGBT <<- countLGBT + 1
    matrix(c(totN/2, countLGBT * totN/totLGBT), ncol = 2)
  } else if(x == 'left'){
    countLeft <<- countLeft + 1
    matrix(c(0, countLeft * totN/totLeft), ncol = 2)
  } else {
    countRight <<- countRight + 1
    matrix(c(totN, countRight * totN/totRight), ncol = 2)
  }
}) %>%
  do.call(rbind, .)

plot(g_lgbt_70_dis,
     layout = layout,
     vertex.size = 0,
     vertex.label.cex = 1.25,
     vertex.label.font = 2)
```

Resources
======
### Network Visualizations

**Katya Ognyanova**<br>
[@Ognyanova](https://twitter.com/Ognyanova) <br>
[http://kateto.net/network-visualization](http://kateto.net/network-visualization)

### Graph Traversal Tutorial
My tutorial on graph traversal with igraph <br>
[/beemyfriend/traversing_graphs_in_R](https://github.com/beemyfriend/traversing_graphs_in_R)

Looking for Speakers & Organizers
=====
```{r, out.width = "400px", echo = 4}
knitr::include_graphics(c('rainbowr.png', 'satRdayLogo.png'))
```

[@r_lgbtq](https://twitter.com/r_lgbtq)<br>
[rlgbtq@gmail.com](rlgbtq@gmail.com)



