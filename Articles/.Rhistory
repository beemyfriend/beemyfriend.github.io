remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
#find the total number of recorded katas
tot_kata <- remDr$findElement(using = 'css', '.is-gray-text')$getElementText() %>%
unlist() %>%
str_extract('\\d+') %>%
as.numeric()
#there are about 30 katas per page reload
tot_pages <- (tot_kata/30) %>%
ceiling()
remDr$screenshot(display = T)
pJS <- phantom()
sys.sleep(5)
remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
remDr$screenshot(display = T)
for(i in 1:3){
webElem <- remDr$findElement('css', 'body')
#  webElem$sendKeysToElement(list(key='end')) #doesn't work
remDr$executeScript('window.scrollTo(0, document.body.scrollHeight);') #doesn't work
Sys.sleep(60)
}
page_source <- remDr$getPageSource()
#find the total number of recorded katas
tot_kata <- remDr$findElement(using = 'css', '.is-gray-text')$getElementText() %>%
unlist() %>%
str_extract('\\d+') %>%
as.numeric()
#there are about 30 katas per page reload
tot_pages <- (tot_kata/30) %>%
ceiling()
kata_links <- sapply(
remDr$findElements('css', '.item-title a'),
function(x){ x$getElementAttribute('href')}) %>%
unlist()
remDr$close
pJS$stop()
kata_links
pJS <- phantom()
Sys.sleep(5)
remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
remDr$screenshot(display = T)
for(i in 1:3){
webElem <- remDr$findElement('css', 'body')
#  webElem$sendKeysToElement(list(key='end')) #doesn't work
remDr$executeScript('window.scrollTo(0, document.body.scrollHeight);') #doesn't work
Sys.sleep(60)
}
page_source <- remDr$getPageSource()
#find the total number of recorded katas
tot_kata <- remDr$findElement(using = 'css', '.is-gray-text')$getElementText() %>%
unlist() %>%
str_extract('\\d+') %>%
as.numeric()
#there are about 30 katas per page reload
tot_pages <- (tot_kata/30) %>%
ceiling()
kata_links <- sapply(
remDr$findElements('css', '.item-title a'),
function(x){ x$getElementAttribute('href')}) %>%
unlist()
kata_links
remDr$close
pJS$stop()
remDr <- remoteDriver(browserName = 'chrome')
remDr$open()
pJS <- phantom()
Sys.sleep(5)
remDr <- remoteDriver(browserName = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
remDr$screenshot(display = T)
for(i in 1:3){
webElem <- remDr$findElement('css', 'body')
#  webElem$sendKeysToElement(list(key='end')) #doesn't work
remDr$executeScript('window.scrollTo(0, document.body.scrollHeight);') #doesn't work
Sys.sleep(30)
}
kata_links <- sapply(
remDr$findElements('css', '.item-title a'),
function(x){ x$getElementAttribute('href')}) %>%
unlist()
kata_links
remDr$close
pJS$stop()
wdman::selenium()
rsDriver()
startServer()
?rsDriver
rsDriver(browser = 'chrome')
rsDriver()
rsDriver(port = 4444)
rsDriver(port = 4444)
rsDriver(port = 4444L)
remDr <- remoteDriver(browserName = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
?remoteDriver
rsDriver(port = 4444L)
remDr <- remoteDriver()
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
rsDriver(port = 4444L)
rsDriver(port = 4444L, browser = 'chrome')
remDr <- remoteDriver()
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
remDr <- remoteDriver(browser = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
remDr$screenshot(display = T)
for(i in 1:3){
webElem <- remDr$findElement('css', 'body')
#  webElem$sendKeysToElement(list(key='end')) #doesn't work
remDr$executeScript('window.scrollTo(0, document.body.scrollHeight);') #doesn't work
Sys.sleep(30)
}
tot_kata <- remDr$findElement(using = 'css', '.is-gray-text')$getElementText() %>%
unlist() %>%
str_extract('\\d+') %>%
as.numeric()
tot_kata
kata_links <- sapply(
remDr$findElements('css', '.item-title a'),
function(x){ x$getElementAttribute('href')}) %>%
unlist()
kata_links
remDr$screenshot(display = T)
kata_links <- sapply(
remDr$findElements('css', '.item-title a'),
function(x){ x$getElementAttribute('href')}) %>%
unlist()
kata_links
remDr$findElements('css', '.item-title a')
remDr$findElements('css', '.item-title a')[[31]]
remDr$findElements('css', '.item-title a')[[30]]
kata_links
remDr
remDr %>% html_nodes('.item-title a')
page_source <- remDr$getPageSource()
html(page_source[1]) %>%
html_nodes('.item-title a') %>%
html_attr('href')
html(page_source[1]) %>%
html_nodes('.item-title a') %>%
html_attr('href')
page_source <- remDr$getPageSource()
html(page_source[1]) %>%
html_nodes('.item-title a') %>%
html_attr('href')
html(page_source[[1]]) %>%
html_nodes('.item-title a') %>%
html_attr('href')
for(i in 1:3){
webElem <- remDr$findElement('css', 'body')
remDr$executeScript('window.scrollTo(0, document.body.scrollHeight);') #doesn't work
Sys.sleep(60)
}
kata_vector <- html(remDr$getPageSource[[1]]) %>%
html_nodes('.item-title a') %>%
html_attr('href')
page_source <- remDr$getPageSource()
kata_vector <- html(page_source[[1]]) %>%
html_nodes('.item-title a') %>%
html_attr('href')
kata_vector
kata_links <- sapply(
remDr$findElements('css', '.item-title a'),
function(x){ x$getElementAttribute('href')}) %>%
unlist()
kata_links
kata_vector <- html(page_source[[1]]) %>%
html_nodes('.item-title a') %>%
html_attr('href') %>%
str_replace('/kata/', '')
kata_vector
remDr$close
remDr$close()
setwd("D:/Websites/beemyfriend.github.io/Articles")
iris
train <- sample(nrow(iris), (nrow(iris) * .75))
train
library(dplyr)
iris
str(iris)
clean_iris <- iris %>%
select(-Species)
library(caret)
train <- sample(nrow(iris), (nrow(iris) * .75))
clean_iris <- iris %>%
select(-Species)
train_iris <- clean_iris[train,]
test_iris <- clean_irs[-train,]
test_iris <- clean_iris[-train,]
train_species <- iris$Species[train]
test_species <- iris$Species[-train]
iris_nb_model <- train(train_iris, train_species, 'nb', trControl = trainControl(method = 'cv', number = 10))
prediction <- predict(iris_nb_model, test_species)
iris_nb_model <- train(train_iris, train_species, 'nb', trControl = trainControl(method = 'cv', number = 10))
prediction <- predict(iris_nb_model, test_species)
iris_nb_model <- train(train_iris, train_species, 'nb', trControl = trainControl(method = 'cv', number = 10))
iris_nb_model
predict(iris_nb_model)
predict(iris_nb_model, test_species)
prediction <- predict(iris_nb_model$finalModel, test_species)
iris_nb_model$finalModel
test_species
prediction <- predict(iris_nb_model$finalModel, test_iris)
ed_guess <- prediction$class
table(ed_guess, test_species)
nrow
train <- sample(nrow(iris), (nrow(iris) * .75))
clean_iris <- iris %>%
select(-Species)
clean_iris <- iris %>%
dplyr::select(-Species)
train_iris <- clean_iris[train,]
test_iris <- clean_iris[-train,]
train_species <- iris$Species[train]
test_species <- iris$Species[-train]
iris_nb_model <- train(train_iris, train_species, 'nb', trControl = trainControl(method = 'cv', number = 10))
prediction <- predict(iris_nb_model$finalModel, test_iris)
ed_guess <- prediction$class
table(ed_guess, test_species)
analyze_model <- function(df, model_func, model_name){
model_table <- model_func(df)
model_info <- list()
model_info[[1]] = model_table
correct_in_col <- c()
total_in_col <- c()
correct_ratio <- c()
for(i in 1:ncol(model_table)){
correct_in_col[i] = model_table[i,i]
total_in_col[i] = model_table[,i] %>%
sum()
correct_ratio[i] = str_c(dimnames(model_table)[[1]][i], ': ', round((100 * correct_in_col[i]/total_in_col[i]), 2), '%')
}
correct_ratio_mean <- mean(correct_in_col/total_in_col)
correct_ratio[length(correct_ratio) + 1] = str_c('Overall: ',round((100 * sum(correct_in_col)/sum(total_in_col)), 2), '%')
model_info[[2]] = c(correct_in_col/total_in_col, sum(correct_in_col)/sum(total_in_col))
model_info[[3]] = correct_ratio
guess_table <- table(df$benchmark_math_avg_value, df$benchmark_math_avg_value)
model_info[[4]] = guess_table
model_info[[5]] = max(total_in_col)/sum(total_in_col)
model_info[[6]] = str_c('Just guessing \'', dimnames(model_table)[[1]][which.max(total_in_col)], '\': ', round((100 * max(total_in_col)/sum(total_in_col)), 2),'%')
model_info[[7]] = correct_ratio_mean
model_info[[8]] = model_name
names(model_info) <- c('confusion_matrix', 'accuracy', 'accuracy_explained', 'truth_matrix', 'optimized_single_guess','optimized_single_guess_explained', 'correct_ratio_mean', 'model_name')
model_info
}
analyze_model(iris, table(ed_guess, test_species, 'IRIS: NB'))
analyze_model(iris, table(ed_guess, test_species), 'IRIS: NB')
table(ed_guess, test_species)
analyze_model <- function(df, model_table, model_name){
model_info <- list()
model_info[[1]] = model_table
correct_in_col <- c()
total_in_col <- c()
correct_ratio <- c()
for(i in 1:ncol(model_table)){
correct_in_col[i] = model_table[i,i]
total_in_col[i] = model_table[,i] %>%
sum()
correct_ratio[i] = str_c(dimnames(model_table)[[1]][i], ': ', round((100 * correct_in_col[i]/total_in_col[i]), 2), '%')
}
correct_ratio_mean <- mean(correct_in_col/total_in_col)
correct_ratio[length(correct_ratio) + 1] = str_c('Overall: ',round((100 * sum(correct_in_col)/sum(total_in_col)), 2), '%')
model_info[[2]] = c(correct_in_col/total_in_col, sum(correct_in_col)/sum(total_in_col))
model_info[[3]] = correct_ratio
guess_table <- table(df$benchmark_math_avg_value, df$benchmark_math_avg_value)
model_info[[4]] = guess_table
model_info[[5]] = max(total_in_col)/sum(total_in_col)
model_info[[6]] = str_c('Just guessing \'', dimnames(model_table)[[1]][which.max(total_in_col)], '\': ', round((100 * max(total_in_col)/sum(total_in_col)), 2),'%')
model_info[[7]] = correct_ratio_mean
model_info[[8]] = model_name
names(model_info) <- c('confusion_matrix', 'accuracy', 'accuracy_explained', 'truth_matrix', 'optimized_single_guess','optimized_single_guess_explained', 'correct_ratio_mean', 'model_name')
model_info
}
analyze_model(iris, table(ed_guess, test_species), 'IRIS: NB')
library(Stringr)
library(stringr)
analyze_model(iris, table(ed_guess, test_species), 'IRIS: NB')
str(iris)
analyze_model <- function(df, model_table, model_name){
model_info <- list()
model_info[[1]] = model_table
correct_in_col <- c()
total_in_col <- c()
correct_ratio <- c()
for(i in 1:ncol(model_table)){
correct_in_col[i] = model_table[i,i]
total_in_col[i] = model_table[,i] %>%
sum()
correct_ratio[i] = str_c(dimnames(model_table)[[1]][i], ': ', round((100 * correct_in_col[i]/total_in_col[i]), 2), '%')
}
correct_ratio_mean <- mean(correct_in_col/total_in_col)
correct_ratio[length(correct_ratio) + 1] = str_c('Overall: ',round((100 * sum(correct_in_col)/sum(total_in_col)), 2), '%')
model_info[[2]] = c(correct_in_col/total_in_col, sum(correct_in_col)/sum(total_in_col))
model_info[[3]] = correct_ratio
guess_table <- table(df$Species, df$Species)
model_info[[4]] = guess_table
model_info[[5]] = max(total_in_col)/sum(total_in_col)
model_info[[6]] = str_c('Just guessing \'', dimnames(model_table)[[1]][which.max(total_in_col)], '\': ', round((100 * max(total_in_col)/sum(total_in_col)), 2),'%')
model_info[[7]] = correct_ratio_mean
model_info[[8]] = model_name
names(model_info) <- c('confusion_matrix', 'accuracy', 'accuracy_explained', 'truth_matrix', 'optimized_single_guess','optimized_single_guess_explained', 'correct_ratio_mean', 'model_name')
model_info
}
analyze_model(iris, table(ed_guess, test_species), 'IRIS: NB')
17/27
17/37
17/38
detach(package:caret)
library(e1071)
library(e1071)
svm_train <- iris[train,]
svm_test <- iris[-train,]
iris_svm_model <- svm(Species~., data = svm_train, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, , svm_test)
table(prediction, svm_test$Species)
prediction
prediction$class
prediction <- predict(iris_svm_model, svm_test)
prediction
prediction[1]
table(prediction, svm_test$Species)
analyze_model(iris, table(ed_guess, test_species), 'IRIS: SVM')
analyze_model(iris, table(prediction, svm_test$Species), 'IRIS: SVM')
library(tree)
train_iris <- iris[train,]
test_iris <- iris[-train,]
train_iris <- iris[train,]
library(e1071)
train_iris <- iris[train,]
test_iris <- iris[-train,]
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
analyze_model(iris, table(prediction, test_iris$Species), 'IRIS: SVM')
detach(package:e1071)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris)
prediction
table(prediction, test_iris$Species)
test_iris
train_iris
iris
test_iris
train_iris
iris
iris_tree_model
test_iris
prediction
prediction <- predict(iris_tree_model, test_iris)
table(prediction, test_iris$Species)
test_iris$Species
table(prediction, test_iris$Species, type = 'class')
length(prediction)
lenght(test_iris$Species)
length(test_iris$Species)
prediction
iris_tree_model <- tree(Species~., data = iris, subset = train)
prediction <- predict(iris_tree_model, test_iris)
table(prediction, test_iris$Species, type = 'class')
prediction %>% nrow()
prediction$class
table(prediction, test_iris, type = 'class')
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Specie)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Specie)
table(prediction, test_iris$Species)
analyze_model(iris, table(prediction, test_iris$Species), 'IRIS: TREE')
detach(package:tree)
prediction <- predict(iris_rf_model, test_iris)
iris_rf_model <- randomForest(Species~., data = iris, subset = train, importance = T)
prediction <- predict(iris_rf_model, test_iris)
library(randomForest)
iris_rf_model <- randomForest(Species~., data = iris, subset = train, importance = T)
prediction <- predict(iris_rf_model, test_iris)
table(prediction, test_iris$Species)
analyze_model(iris, table(prediction, test_iris$Species, 'IRIS: RANDOM FORESTS'))
analyze_model(iris, table(prediction, test_iris$Species), 'IRIS: RANDOM FORESTS')
install.packages('factoextra')
set.seed(1)
iris_KMC_model <- kmean(clean_iris, 3, nstart = 201)
s
iris_KMC_model <- kmeans(clean_iris, 3, nstart = 201)
table(iris_KMC_model, iris$Species)
iris_KMC_model$cluster
table(iris_KMC_model$cluster, iris$Species)
iris_KMC_model <- kmeans(clean_iris, 3, nstart = 20)
table(iris_KMC_model$cluster, iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
library(e1071)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
detach(package:e1071)
library(tree)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
prediction <- predict(iris_tree_model, test_iris, type='class')
iris_tree_model <- tree(Species~., data = train_iris)
prediction <- predict(iris_tree_model, test_iris, type='class')
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
detach(package:tree)
library(e1071)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
iris_svm_model <- svm(Species~., data = train_iris, kernel = 'linear', cost = 10)
prediction <- predict(iris_svm_model, test_iris)
table(prediction, test_iris$Species)
apply(iris, 2, mean)
iris
str(iris)
apply(iris_clean, 2, mean)
apply(clean_iris, 2, mean)
apply(clean_iris, 2, mean)
apply(clean_iris, 2, var)
prcomp(clean_iris, scale=T)
iris_pca_model <- prcomp(clean_iris, scale=T)
iris_pca_model
biplot(iris_pca_model, scale=0)
iris_CHC_model <- hclust(dist(clean_iris))
iris_CHC_model <- hclust(dist(clean_iris))
iris_CHC_model <- hclust(dist(clean_iris))
iris_CHC_model
plot(iris_chc_model.main)
plot(iris_chc_model)
plot(iris_CHC_model)
iris_CHC_model <- hclust(dist(clean_iris), method = 'complete')
iris_AHC_model <- hclust(dist(clean_iris), method = 'average')
iris_SHC_model <- hclust(dist(clean_iris), method = 'single')
plot(iris_CHC_model)
plot(iris_AHC_model)
plot(iris_SHC_model)
plot(iris_CHC_model)
plot(iris_AHC_model)
plot(iris_SHC_model)
plot(iris_CHC_model)
cutree(iris_CHC_model, 3.75)
cut_CHC <- cutree(iris_CHC_model, 3.75)
table(cut_CHC, iris$Species)
plot(iris_AHC_model)
cut_CHC <- cutree(iris_CHC_model, 3.75)
plot(iris_AHC_model)
cut_iris_AHC <- cutree(iris_AHC_model, 1.8)
cut_iris_CHC <- cutree(iris_CHC_model, 3.75)
table(cut_iris_CHC, iris$Species)
table(cut_iris_AHC, iris$Species)
plot(iris_AHC_model)
cut_iris_AHC <- cutree(iris_AHC_model, 1.7)
table(cut_iris_AHC, iris$Species)
cut_iris_AHC <- cutree(iris_AHC_model, 1.6)
cut_iris_AHC <- cutree(iris_AHC_model, 1.6)
table(cut_iris_AHC, iris$Species)
cut_iris_AHC <- cutree(iris_AHC_model, 1.5)
table(cut_iris_AHC, iris$Species)
