Exploring Graphs with igraph
========================================================
author: Benjamin Ortiz Ulloa
date: 
autosize: true
transition: fade

<style>
.small-code pre code {
  font-size: 1em;
}

.grey-out {
  color: 'lightgrey'
}
</style>

Exploring Graphs with igraph
=====
<ol>
  <li>What's a Graph?</li>
  <li>Practical Applications: Recommendations</li>
  <li>Measuring Impact/Importance</li>
  <li>Practical Applications: Keyphrases</li>
  <li>Practical Applications: Models</li>
  <li><b>Code:</b> Creating and Exploring a Graph</li>
  <li>Concluding Remarks</li>
</ol>


Exploring Graphs with igraph
=====
<ol>
  <li>What's a Graph?</li>
  <li style='color: lightgrey'>Practical Applications: Recommendations</li>
  <li style='color: lightgrey'>Measuring Impact/Importance</li>
  <li style='color: lightgrey'>Practical Applications: Keyphrases</li>
  <li style='color: lightgrey'>Practical Applications: Models</li>
  <li style='color: lightgrey'><b>Code:</b> Creating and Exploring a Graph</li>
  <li style='color: lightgrey'>Concluding Remarks</li>
</ol>


What's a Graph?
========================================================

```{r, echo=F, fig.width = 15, fig.height = 10}
library(tidyverse)
library(igraph)
library(igraphdata)
library(diagram)
g <- make_empty_graph(directed = T) +
  vertices(
    c('Thing', 'Node', 'Vertex'),
    label.cex = 1.75,
    label.font = 2
  ) +
  edges(
    c("Thing", "Node",
      "Node", "Vertex",
      "Vertex", "Thing",
      "Vertex", "Node"),
    show = c(1, 2, 3),
    label = c("Relationship", "Link", "Edge", "Another Edge"),
    label.cex = 1.75,
    label.font = 2
  )

layout = matrix(c(2, 3, 1, 1, 3, 1), ncol = 2, byrow = T)

g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.label = sapply(V(g)$name, function(x){if_else(x %in% c('Thing'), x, '')}),
    vertex.size = sapply(V(g)$name, function(x){if_else(x %in% c('Thing'), 45, 0)}),
    edge.width = 5
  )
```

What's a Graph?
========================================================

```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.label = sapply(V(g)$name, function(x){if_else(x %in% c('Node', 'Thing'), x, '')}),
    vertex.size = sapply(V(g)$name, function(x){if_else(x %in% c('Node', 'Thing'), 45, 0)})
  )
  
```

What's a Graph?
========================================================

```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.size= 45
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[!label %in% c("Relationship")]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[!label %in% c("Relationship", 'Link')]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[label %in% c("Another Edge")]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

Relationships can have direction
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[label %in% c("Another Edge")]} %>%
  plot(
    layout = layout,
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

Multiple relationships are possible
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

Everything can have attributes
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.label = str_c(V(.)$name, 'attr', sep ='\n'),
    edge.label = str_c(E(.)$label, 'attr', sep = '\n'),
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

Attributes can be visualized
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.size = c(30, 60, 70),
    vertex.color = c('lightblue', 'lightblue', 'pink'),
    edge.width = c(2, 10, 20, 5),
    edge.label = '',
    edge.lty = c(1, 6, 5, 2),
    edge.arrow.size = 3,
    vertex.shape = c('circle', 'square', 'circle')
  )
```


Edge attributes provide context
====
```{r, echo = F, fig.width = 15, fig.height = 10}
tempG <- make_empty_graph(directed = F) +
  vertices(c("Person1", "Person2", "Person3", 'Person4', "Person5"),
           size = 45,
           label.cex = 1.75,
           label.font = 2) +
  edges(
    c("Person1", "Person2",
      "Person1", "Person3",
      "Person2", "Person3",
      "Person1", "Person4",
      "Person1", "Person5",
      "Person2", "Person4",
      "Person2", "Person5"),
    lty1 = c(1, 2, 1, 1, 1, 1),
    lty2 = c(1, 2, 2, 1, 1, 1),
    label1_1 = c("Like", "???", "???", "", "", "", "" ),
    label1 = c("Like", "Like", "Like", '', '', '', ''),
    label2 = c("Like", "Dislike", "Dislike", '', '', '', ''),
    label3 = c("???", "Dislike", "???", "Like", "Like", "Like", 'Like'),
    label4 = c("Like", "Dislike", "Dislike", "Like", "Like", "Like", 'Like'),
    color1_1 = c("#1b9e77", rep("lightgrey", 5)),
    color1 = "#1b9e77",
    color2 = c("#1b9e77", "#d95f02", "#d95f02"),
    color3 = c("lightgrey", '#d95f02', 'lightgrey'),
    color4 = c("#1b9e77", "#d95f02", "#d95f02", rep("#1b9e77", 3)),
    label.cex = 2,
    label.font = 2,
    width = 8
  )

tempG %>%
  {. - E(.)[2:3]} %>%
  {. - V(.)[c('Person4', 'Person5')]} %>%
  plot(layout = layout,
       vertex.size = c(45, 45, 0),
       vertex.label = c("Person1", "Person2", ''),
       edge.label = c("Like", '', ''),
       edge.color = E(.)$color1)
```

What does this relationship mean?
====
```{r, echo = F, fig.width = 15, fig.height = 10}
tempG  %>%
  {. - V(.)[c('Person4', 'Person5')]} %>%
  plot(layout = layout,
     edge.label = E(.)$label1_1,
     edge.color = E(.)$color1_1)
```

Friend of my friend... 
====
```{r, echo = F, fig.width = 15, fig.height = 10}
tempG  %>%
  {. - V(.)[c('Person4', 'Person5')]} %>%
  plot(layout = layout,
     edge.label = E(.)$label1,
     edge.color = E(.)$color1)
```

or enemy of my enemy? 
====
```{r, echo = F, fig.width = 15, fig.height = 10}
tempG  %>%
  {. - V(.)[c('Person4', 'Person5')]} %>%
  plot(layout= layout,
       edge.label = E(.)$label2,
       edge.color = E(.)$color2)
```

What happens if relationships change?
======
```{r, echo = F, fig.width = 15, fig.height = 10}
tempG %>%
  {. - V(.)[c('Person4', 'Person5')]} %>%
  plot(layout = layout,
       vertex.label = c("Person1", "Person2", 'Person3'),
       edge.label = c("Like", 'Like', 'Like'),
       edge.color = E(.)$color1)
```

What happens if relationships change?
======
```{r, echo = F, fig.width = 15, fig.height = 10}
tempG %>%
  {. - V(.)[c('Person4', 'Person5')]} %>%
  plot(layout = layout,
       edge.label = E(.)$label3,
       edge.color = E(.)$color3,
       edge.lty = E(.)$lty1)
```

What happens if relationships change?
======
```{r, echo = F, fig.width = 15, fig.height = 10}
tempLayout <- matrix(ncol = 2, byrow = T,
                     c(4, 5,
                       3, 1,
                       5, 1,
                       2, 4,
                       2, 2))
tempG %>%
  plot(layout = tempLayout,
       edge.label = E(.)$label4,
       edge.color = E(.)$color4,
       edge.lty = E(.)$lty2)
```


Node attributes can also be nodes
======
```{r, echo = F, fig.width = 15, fig.height = 10}
g <- make_empty_graph(directed = T) +
  vertices(
    c('Thing', 'Node', 'Vertex', "Blue", "Pink", "Small", "Large", "Circle", "Square"),
    label.cex = 1.75,
    label.font = 2,
    size = c(rep(45, 3), rep(30, 6)),
    color = c(rep('orange', 3), rep('lightgrey', 6))
  ) +
  edges(
    c("Thing", "Blue",
      "Node", "Blue",
      "Vertex", "Pink",
      "Thing", "Small",
      "Node", "Large", 
      "Vertex", "Large",
      "Thing", "Circle",
      "Node", "Square",
      "Vertex", "Circle"),
    label = c(rep('Color', 3),
              rep("Size", 3),
              rep("Shape", 3)),
    label.cex = 1.5,
    label.font = 2
  )

layout = matrix(c(4.5, 7,
                  2, 3,
                  7, 3,
                  1, 6,
                  9, 1,
                  4.5, 10,
                  4.5, 1,
                  8, 6,
                  0, 1),
                ncol = 2,
                byrow = T)

plot(g, layout = layout)
```

Connections can be projected
========
```{r, echo = F, fig.width = 15, fig.height = 10}
plot(g - E(g)[V(g) %--% V(g)[c('Square', 'Small', 'Pink')]],
     layout = layout,
     vertex.size = c(rep(45, 3), rep(0, 6)),
     vertex.label = c('Thing', 'Node', 'Vertex', rep('', 6)))
```

These projections enrich our data
==========
```{r, echo = F, fig.width = 15, fig.height = 10}
plot(g - E(g) + edges(c("Node", "Thing",
                        "Vertex", "Node",
                        "Thing", "Vertex"),
                      label = c("Same color",
                                "Same size",
                                "Same shape")),
     layout = layout,
     vertex.size = c(rep(45, 3), rep(0, 6)),
     vertex.label = c('Thing', 'Node', 'Vertex', rep('', 6)),
     edge.label.cex = 1.75,
     edge.label.font = 2,
     edge.arrow.size = 0,
     edge.width = 3,
     edge.curved = T)
```

Exploring Graphs with igraph
=====
<ol>
  <li style='color: lightgrey'>What's a Graph?</li>
  <li>Practical Applications: Recommendations</li>
  <li style='color: lightgrey'>Measuring Impact/Importance</li>
  <li style='color: lightgrey'>Practical Applications: Keyphrases</li>
  <li style='color: lightgrey'>Practical Applications: Models</li>
  <li style='color: lightgrey'><b>Code:</b> Creating and Exploring a Graph</li>
  <li style='color: lightgrey'>Concluding Remarks</li>
</ol>

Practical Application: Recommendations
======

**<br><h2>35% of what consumers buy on Amazon and 75% of what users watch on Netflix come from product recommendations</h2>**
<br>
<br>
<p style = 'font-size: 25px'>"How retailers can keep up with consumers"  Ian Mackenzie, Chris Meyer, and Steve Noble</p>

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec05.png")
```

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec06.png")
```

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec07.png")
```

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec08.png")
```

Content Based Recommendations 
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec09.png")
```

Collaborative Filtering 
========================================================

```{r echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec01.png")
```

Collaborative Filtering 
========================================================

```{r  echo=FALSE,  out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec02.png")
```

Collaborative Filtering 
========================================================

```{r echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec03.png")
```

Collaborative Filtering 
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec04.png")
```


Exploring Graphs with igraph
=====
<ol>
  <li style='color: lightgrey'>What's a Graph?</li>
  <li style='color: lightgrey'>Practical Applications: Recommendations</li>
  <li>Measuring Impact/Importance</li>
  <li style='color: lightgrey'>Practical Applications: Keyphrases</li>
  <li style='color: lightgrey'>Practical Applications: Models</li>
  <li style='color: lightgrey'><b>Code:</b> Creating and Exploring a Graph</li>
  <li style='color: lightgrey'>Concluding Remarks</li>
</ol>


What nodes are important?
=====

```{r, echo=F, fig.width = 15, fig.height = 10}
set.seed(1234)
# g <- sample_gnp(30, 5/20, directed = T)
g <- sample_islands(2, 15, 3/10, 3) %>% as.directed('arbitrary')
V(g)$name <- 1:vcount(g)
V(g)$prT <- page_rank(g, directed = T)$vector
V(g)$prF <- page_rank(g, directed = F)$vector
V(g)$hub <- hub_score(g)$vector
V(g)$auth <- authority_score(g)$vector
V(g)$degIn <- degree(g, mode = 'in')
V(g)$degOut <- degree(g, mode = 'out')
V(g)$degAll <- degree(g, mode = 'all')
V(g)$btwnT <- betweenness(g, directed = T)
V(g)$btwnF <- betweenness(g, directed = F)
V(g)$closeOut <- closeness(g, mode  = 'out')
V(g)$closeIn <- closeness(g, mode  = 'in')
V(g)$closeAll <- closeness(g, mode  = 'all')
layout <- layout_nicely(g)
plot(g, layout=layout, vertex.label = '', vertex.size = 12)
```

Diameter and Shortest Paths
===
```{r, echo=F, fig.width = 15, fig.height = 10}
dmter <- get_diameter(g) %>% {shortest_paths(g, from = .[1], to = .[length(.)], output = 'both')}

plot(g, layout = layout, vertex.label = '', vertex.size = 12,
     vertex.color = ifelse(V(g)$name %in% dmter$vpath[[1]], "skyblue", rgb(.2, .2, .2, .2)),
     edge.color = ifelse(E(g) %in% dmter$epath[[1]], 'orange', rgb(.2, .2, .2, .2)),
     edge.width = ifelse(E(g) %in% dmter$epath[[1]], 5, 1)
)

```

D Betweeness
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$btwnT >= tail(sort(V(g)$btwnT), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$btwnT/max(V(g)$btwnT)) * 20)
```

UD Betweeness
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$btwnF >= tail(sort(V(g)$btwnF), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$btwnF/max(V(g)$btwnF)) * 20)
```


In Degree
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$degIn >= tail(sort(V(g)$degIn), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$degIn/max(V(g)$degIn)) * 20)
```

Out Degree
=========
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$degOut >= tail(sort(V(g)$degOut), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$degOut/max(V(g)$degOut)) * 20)
```

Degree
===========
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$degAll >= tail(sort(V(g)$degAll), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$degAll/max(V(g)$degAll)) * 20)
```


In Closeness
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$closeIn >= tail(sort(V(g)$closeIn), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$closeIn/max(V(g)$closeIn)) * 20)
```

Out Closeness
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$closeOut >= tail(sort(V(g)$closeOut), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$closeOut/max(V(g)$closeOut)) * 20)
```

Closeness
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$closeAll >= tail(sort(V(g)$closeAll), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$closeAll/max(V(g)$closeAll)) * 20)
```

Hub Score
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$hub >= tail(sort(V(g)$hub), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$hub/max(V(g)$hub)) * 20)
```

Authority Score
=======
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$auth >= tail(sort(V(g)$auth), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$auth/max(V(g)$auth)) * 20)
```

D Page Rank
====
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$prT >= tail(sort(V(g)$prT), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$prT/max(V(g)$prT)) * 20)
```

UD Page Rank
====
```{r, echo=F, fig.width = 15, fig.height = 10}
V(g)$color <- ifelse(V(g)$prF >= tail(sort(V(g)$prF), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$prF/max(V(g)$prF)) * 20)
```

Exploring Graphs with igraph
=====
<ol>
  <li style='color: lightgrey'>What's a Graph?</li>
  <li style='color: lightgrey'>Practical Applications: Recommendations</li>
  <li style='color: lightgrey'>Measuring Impact/Importance</li>
  <li>Practical Applications: Keyphrases</li>
  <li style='color: lightgrey'>Practical Applications: Models</li>
  <li style='color: lightgrey'><b>Code:</b> Creating and Exploring a Graph</li>
  <li style='color: lightgrey'>Concluding Remarks</li>
</ol>


Practical Application: Keyphrases
=========

**<h5>PyData conferences bring together users and developers of data analysis tools to share ideas and learn from each other. The PyData community gathers to discuss how best to apply Python tools, as well as tools using R and Julia, to meet evolving challenges in data management, processing, analytics, and visualization. We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person.</h5>**


TextRank Algorithm
========
<ol>
  <li>Create a text graph</li>
  <li>Keep only words that are nouns and adjectives</li>
  <li>Run the PageRank algorithm</li>
  <li>Keep only the top 1/3 PageRanked vertices</li>
  <li>The remaining connections represent phrases</li>
  <ul><li>Make sure the words actually appear in sequential order before committing to a phrase</li></ul>
</ol>
<p style = 'font-size: 25px'>"TextRank: Bringing Order into Texts" Rada Mihalcea and Paul Tarau</p>
<p style = 'font-size: 25px'>"PositionRank: An Unsupervised Approach to Keyphrase Extraction from Scholarly Documents" Corina Florescu and Cornelia Caragea</p>

Proximity as a connection
=====
```{r echo=F, fig.width = 15, fig.height = 10}
library(tidytext)

pyData <- "PyData conferences bring together users and developers of data analysis tools to share ideas and learn from each other. The PyData community gathers to discuss how best to apply Python tools, as well as tools using R and Julia, to meet evolving challenges in data management, processing, analytics, and visualization. We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person."

pydata_words <- pyData %>% 
  str_split('\\.') %>%
  .[[1]] %>%
  str_trim() %>%
  .[. != ''] %>%
  tibble(sent = 1:length(.),
         words = .) %>%
  unnest_tokens(word, words) %>%
  group_by(sent) %>%
  nest() %>%
  mutate(data = map(data, function(x){
    x %>%
      mutate(next_word = lead(word)) %>%
      filter(!is.na(next_word))
  })) %>%
  unnest() %>%
  select(word, next_word, sent) %>%
  mutate(type = 'next')

set.seed(4321)
pydata_words %>%
  filter(sent == 1) %>%
  graph_from_data_frame() %>%
  plot(vertex.size = 0, vertex.label.font = 2, vertex.label.cex = 1.75)
```

Proximity as a connection
=====

```{r echo=F, fig.width = 15, fig.height = 10}
set.seed(4321)

pydata_words %>%
  graph_from_data_frame() %>%
  plot(vertex.size = 0, vertex.label.font = 2, vertex.label.cex = 1.75)
```

D TextRank: PyData
=====
```{r, echo = F, fig.width = 15, fig.height = 10}
library(openNLP)
library(NLP)

sent_token_annotator <- Maxent_Sent_Token_Annotator()
pos_token_annotator <- Maxent_POS_Tag_Annotator()
word_token_annotator <- Maxent_Word_Token_Annotator()

createTextRank <- function(abstract, stemmer = F, directed = T){
  s <- as.String(abstract %>%str_to_lower())
  
  
  a <- annotate(s, list(sent_token_annotator, word_token_annotator, pos_token_annotator)) %>%
  {annotations_in_spans(subset(., type =="word"), subset(., type == 'sentence'))}
  
  wordsEdge <- lapply(a, function(x){
    if(stemmer){
      stemmed_words <- SnowballC::wordStem(s[x])
      words <- sprintf("%s::%s", sapply(x$features, '[[', 'POS'), stemmed_words)
    }else {
      words <- sprintf('%s::%s', sapply(x$features, '[[', 'POS'), s[x]) %>%
        str_to_upper()
    }
     
    tibble(
      from = words[1:(length(words)-1)],
      to = words[2:length(words)],
      nextOrder = 1:(length(words) -1)
    )
  }) %>%
    enframe(name = 'sentenceOrder') %>%
    unnest() %>%
    filter(str_detect(from, 'NN.*::|JJ.*::'),
           str_detect(to, 'NN.*::|JJ.*::')) %>%
    mutate_if(is.character, str_replace, pattern = '^.+::', replacement = '') %>%
    mutate_if(is.character, SnowballC::wordStem) %>%
    select(from, to, sentenceOrder, nextOrder)
  
  g <- graph_from_data_frame(wordsEdge)
  V(g)$pr <- page_rank(g, directed = directed)$vector
  V(g)$size = 0
  V(g)$label.cex = 1.7
  V(g)$label.font = 2
  g
}

cutOff = 2.8

coc <- "PyData is dedicated to providing a harassment-free conference experience for everyone, regardless of gender, sexual orientation, gender identity and expression, disability, physical appearance, body size, race, or religion. We do not tolerate harassment of conference participants in any form. All communication should be appropriate for a professional audience including people of many different backgrounds. Sexual language and imagery is not appropriate for any conference venue, including talks. Be kind to others. Do not insult or put down other attendees. Behave professionally. Remember that harassment and sexist, racist, or exclusionary jokes are not appropriate for PyData. Attendees violating these rules may be asked to leave the conference without a refund at the sole discretion of the conference organizers. Thank you for helping make this a welcoming, friendly event for all."


set.seed(4321)
createTextRank(pyData) %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/cutOff)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( )
```

UD TextRank: PyData
====
```{r echo = F, fig.width = 15, fig.height = 10}
set.seed(4321)
createTextRank(pyData, F, F) %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/cutOff)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( )
```

D TextRank: PyData's CoC
=====
```{r echo = F, fig.width = 15, fig.height = 10}
set.seed(4321)
coc %>%
  createTextRank(F, T) %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/cutOff)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot()
```

UD TextRank: PyData's CoC
=====
```{r echo = F, fig.width = 15, fig.height = 10}
set.seed(4321)
coc %>%
  createTextRank(F, F) %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/cutOff)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( )
```


Exploring Graphs with igraph
=======
<ol>
  <li style='color: lightgrey'>What's a Graph?</li>
  <li style='color: lightgrey'>Practical Applications: Recommendations</li>
  <li style='color: lightgrey'>Measuring Impact/Importance</li>
  <li style='color: lightgrey'>Practical Applications: Keyphrases</li>
  <li>Practical Applications: Models</li>
  <li style='color: lightgrey'><b>Code:</b> Creating and Exploring a Graph</li>
  <li style='color: lightgrey'>Concluding Remarks</li>
</ol>


Simple Contagion: Susceptible
===========

System at Time = 0

```{r, echo = F, fig.width = 11}
par(mar = c(1,1,1,1))
openplotmat()
elpos <- coordinates(c(3, 3))
fromto <- matrix(ncol = 2, byrow = T,
                 data = c(2, 4, 2, 6, 4, 6))

nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for(i in 1:nr){
  arrpos[i, ] <- straightarrow(to = elpos[fromto[i, 2],],
                               from = elpos[fromto[i, 1],],
                               lwd = 2, 
                               arr.pos = .6, 
                               arr.length = .0)
}

textellipse(mid = elpos[2,],
            radx = .1,
            rady = .1,
            lab = "Infected",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[4,],
            radx = .1,
            rady = .1,
            lab = "Susceptible",
            cex = 1.5,
            shadow.col = "#1b9e77")

textellipse(mid = elpos[6,],
            radx = .1,
            rady = .1,
            lab = "Susceptible",
            cex = 1.5,
            shadow.col = "#1b9e77")
```


Simple Contagion: Infected
===========

System at Time = 1


```{r, echo = F, fig.width = 11}
par(mar = c(1,1,1,1))
openplotmat()
elpos <- coordinates(c(3, 3))
fromto <- matrix(ncol = 2, byrow = T,
                 data = c(2, 4, 2, 6, 4, 6))

nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for(i in 1:nr){
  arrpos[i, ] <- straightarrow(to = elpos[fromto[i, 2],],
                               from = elpos[fromto[i, 1],],
                               lwd = 2, 
                               arr.pos = .6, 
                               arr.length = .0)
}

textellipse(mid = elpos[2,],
            radx = .1,
            rady = .1,
            lab = "Infected",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[4,],
            radx = .1,
            rady = .1,
            lab = "Infected",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[6,],
            radx = .1,
            rady = .1,
            lab = "Infected",
            cex = 1.5,
            shadow.col = "#d95f02")
```

SI Model
=======

```{r, out.width = '700px', echo = F, fig.width = 11}
knitr::include_graphics("SIR/SI_noR.gif")
```


SI Model Quantified
======
```{r, out.width = '700px', echo = F, fig.width = 11}
stateDF <- read_rds('SIR/SI_STATE_DF.rds')

stateDF %>%
  mutate(percent = n/75) %>%
  ggplot(aes(time, percent, color = state)) +
    geom_line(size = 1.5) +
    theme_bw() +
  scale_color_manual(values = c('s' = "#1b9e77",
                                'i' = "#d95f02"))

```


Simple Contagion: Recovered
===========
System at Time = 2 | Infection Life = 2

```{r, echo = F, fig.width = 11}
par(mar = c(1,1,1,1))
openplotmat()
elpos <- coordinates(c(3, 3))
fromto <- matrix(ncol = 2, byrow = T,
                 data = c(2, 4, 2, 6, 4, 6))

nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for(i in 1:nr){
  arrpos[i, ] <- straightarrow(to = elpos[fromto[i, 2],],
                               from = elpos[fromto[i, 1],],
                               lwd = 2, 
                               arr.pos = .6, 
                               arr.length = .0)
}

textellipse(mid = elpos[2,],
            radx = .1,
            rady = .1,
            lab = "Recovered",
            cex = 1.5,
            shadow.col = "#7570b3")

textellipse(mid = elpos[4,],
            radx = .1,
            rady = .1,
            lab = "Infected",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[6,],
            radx = .1,
            rady = .1,
            lab = "Infected",
            cex = 1.5,
            shadow.col = "#d95f02")
```


SIR Model
=======
```{r, out.width = '700px', echo = F, fig.width = 11}
knitr::include_graphics("SIR/SIR.gif")
```

SIR Model Quantified
=====
```{r, out.width = '700px', echo = F, fig.width = 11}
stateDF <- read_rds('SIR/SIR_STATE_DF.rds')

stateDF %>%
  mutate(percent = n/75) %>%
  ggplot(aes(time, percent, color = state)) +
    geom_line(size = 1.5) +
    theme_bw() +
  scale_color_manual(values = c('s' = "#1b9e77",
                                'i' = "#d95f02",
                                'r' = "#7570b3"))

```


Complex Social Contagion: Agents Matter
===

System at Time = 0 | Resistence = 1 or 2

```{r, echo = F, fig.width = 11}
par(mar = c(1,1,1,1))
openplotmat()
elpos <- coordinates(c(3, 3))
fromto <- matrix(ncol = 2, byrow = T,
                 data = c(2, 4, 2, 6, 4, 6))

nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for(i in 1:nr){
  arrpos[i, ] <- straightarrow(to = elpos[fromto[i, 2],],
                               from = elpos[fromto[i, 1],],
                               lwd = 2, 
                               arr.pos = .6, 
                               arr.length = .0)
}

textellipse(mid = elpos[2,],
            radx = .1,
            rady = .1,
            lab = "Infected\n alpha = 1",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[4,],
            radx = .1,
            rady = .1,
            lab = "Susceptible\n alpha = 1",
            cex = 1.5,
            shadow.col = "#1b9e77")

textellipse(mid = elpos[6,],
            radx = .1,
            rady = .1,
            lab = "Susceptible\n alpha = 2",
            cex = 1.5,
            shadow.col = "#1b9e77")
```

Complex Social Contagion: Agents Matter
===

System at Time = 1 | Resistence = 1 or 2

```{r, echo = F, fig.width = 11}
par(mar = c(1,1,1,1))
openplotmat()
elpos <- coordinates(c(3, 3))
fromto <- matrix(ncol = 2, byrow = T,
                 data = c(2, 4, 2, 6, 4, 6))

nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for(i in 1:nr){
  arrpos[i, ] <- straightarrow(to = elpos[fromto[i, 2],],
                               from = elpos[fromto[i, 1],],
                               lwd = 2, 
                               arr.pos = .6, 
                               arr.length = .0)
}

textellipse(mid = elpos[2,],
            radx = .1,
            rady = .1,
            lab = "Infected\n alpha = 1",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[4,],
            radx = .1,
            rady = .1,
            lab = "Infected\n alpha = 1",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[6,],
            radx = .1,
            rady = .1,
            lab = "Susceptible\n alpha = 2",
            cex = 1.5,
            shadow.col = "#1b9e77")
```

Complex Social Contagion: Agents Matter
===

System at Time = 2 | Resistence = 1 or 2

```{r, echo = F, fig.width = 11}
par(mar = c(1,1,1,1))
openplotmat()
elpos <- coordinates(c(3, 3))
fromto <- matrix(ncol = 2, byrow = T,
                 data = c(2, 4, 2, 6, 4, 6))

nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for(i in 1:nr){
  arrpos[i, ] <- straightarrow(to = elpos[fromto[i, 2],],
                               from = elpos[fromto[i, 1],],
                               lwd = 2, 
                               arr.pos = .6, 
                               arr.length = .0)
}

textellipse(mid = elpos[2,],
            radx = .1,
            rady = .1,
            lab = "Infected\n alpha = 1",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[4,],
            radx = .1,
            rady = .1,
            lab = "Infected\n alpha = 1",
            cex = 1.5,
            shadow.col = "#d95f02")

textellipse(mid = elpos[6,],
            radx = .1,
            rady = .1,
            lab = "Infected\nalpha = 2",
            cex = 1.5,
            shadow.col = "#d95f02")
```


SI Model
=======
```{r, out.width = '700px', echo = F, fig.width = 11}
knitr::include_graphics("SIR/COMPLEX_SI_noR.gif")
```


SI Model Quantified
======
```{r, out.width = '700px', echo = F, fig.width = 11}
stateDF <- read_rds('SIR/COMPLEX_SI_STATE_DF.rds')

stateDF %>%
  mutate(percent = n/75) %>%
  ggplot(aes(time, percent, color = state)) +
    geom_line(size = 1.5) +
    theme_bw() +
  scale_color_manual(values = c('s' = "#1b9e77",
                                'i' = "#d95f02"))

```

Exploring Graphs with igraph
=====
<ol>
  <li style='color: lightgrey'>What's a Graph?</li>
  <li style='color: lightgrey'>Practical Applications: Recommendations</li>
  <li style='color: lightgrey'>Measuring Impact/Importance</li>
  <li style='color: lightgrey'>Practical Applications: Keyphrases</li>
  <li style='color: lightgrey'>Practical Applications: Models</li>
  <li><b>Code:</b> Creating and Exploring a Graph</li>
  <li style='color: lightgrey'>Concluding Remarks</li>
</ol>

Code!
===========
<h1>Please check the provided Jupyter Notebook</h1>

Exploring Graphs with igraph
=====
<ol>
  <li style='color: lightgrey'>What's a Graph?</li>
  <li style='color: lightgrey'>Practical Applications: Recommendations</li>
  <li style='color: lightgrey'>Measuring Impact/Importance</li>
  <li style='color: lightgrey'>Practical Applications: Keyphrases</li>
  <li style='color: lightgrey'>Practical Applications: Models</li>
  <li style='color: lightgrey'><b>Code:</b> Creating and Exploring a Graph</li>
  <li>Concluding Remarks</li>
</ol>

dc2018.satrdays.org
======
```{r, out.width = '700px', echo=F}
knitr::include_graphics("brown_satrday_dc_2018.gif")
```

@r_lgbtq
======
```{r, out.width = '500px', echo = F}
knitr::include_graphics("rainbowr.png")
```

\#TDoRDatathon

Learn More!
======
<ul>
  <li>Katerine Ognyanova</li>
  <ul><li><a href='http://kateto.net/tutorials/'>http://kateto.net/tutorials/</a></li></ul>
  <li>Kelvin R. Lawrence</li>
  <ul><li><a href='http://kelvinlawrence.net/book/Gremlin-Graph-Guide.html'>http://kelvinlawrence.net/book/Gremlin-Graph-Guide.html</a></li></ul>
  <li>Neo4j</li>
  <ul><li><a href='https://neo4j.com/graphacademy/'>https://neo4j.com/graphacademy/</a></li></ul>
