Exploring Graphs
========================================================
author: Benjamin Ortiz Ulloa
date: 
autosize: true
transition: fade


What's a Graph?
========================================================

```{r, echo=F, fig.width = 15, fig.height = 10}
library(tidyverse)
library(igraph)
library(igraphdata)
g <- make_empty_graph(directed = T) +
  vertices(
    c('Thing', 'Node', 'Vertex'),
    label.cex = 1.75,
    label.font = 2
  ) +
  edges(
    c("Thing", "Node",
      "Node", "Vertex",
      "Vertex", "Thing",
      "Vertex", "Node"),
    show = c(1, 2, 3),
    label = c("Relationship", "Link", "Edge", "Another Edge"),
    label.cex = 1.75,
    label.font = 2
  )

layout = matrix(c(2, 3, 1, 1, 3, 1), ncol = 2, byrow = T)

g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.label = sapply(V(g)$name, function(x){if_else(x %in% c('Thing'), x, '')}),
    vertex.size = sapply(V(g)$name, function(x){if_else(x %in% c('Thing'), 45, 0)}),
    edge.width = 5
  )
```

What's a Graph?
========================================================

```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.label = sapply(V(g)$name, function(x){if_else(x %in% c('Node', 'Thing'), x, '')}),
    vertex.size = sapply(V(g)$name, function(x){if_else(x %in% c('Node', 'Thing'), 45, 0)})
  )
  
```

What's a Graph?
========================================================

```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)} %>%
  plot(
    layout = layout,
    vertex.size= 45
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[!label %in% c("Relationship")]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[!label %in% c("Relationship", 'Link')]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

What's a Graph?
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[label %in% c("Another Edge")]} %>%
  plot(
    layout = layout,
    edge.arrow.size = 0,
       vertex.size= 45,
       edge.width = 5
  )
```

Relationships can have direction
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  {. - E(.)[label %in% c("Another Edge")]} %>%
  plot(
    layout = layout,
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

Multiple relationships are possible
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

Everything can have attributes
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.label = str_c(V(.)$name, 'attr', sep ='\n'),
    edge.label = str_c(E(.)$label, 'attr', sep = '\n'),
    vertex.size= 45,
    edge.width = 5,
    edge.arrow.size = 3
  )
```

Attributes can be visualized
============
```{r, echo = F, fig.width = 15, fig.height = 10}
g %>%
  plot(
    layout = layout,
    edge.curved = c(0, .25, 0, .25),
    vertex.size = c(30, 60, 70),
    vertex.color = c('lightblue', 'lightblue', 'pink'),
    edge.width = c(2, 10, 20, 5),
    edge.label = '',
    edge.lty = c(1, 6, 5, 2),
    edge.arrow.size = 3,
    vertex.shape = c('circle', 'square', 'circle')
  )
```

Node attributes can also be nodes
======
```{r, echo = F, fig.width = 15, fig.height = 10}
g <- make_empty_graph(directed = T) +
  vertices(
    c('Thing', 'Node', 'Vertex', "Blue", "Pink", "Small", "Large", "Circle", "Square"),
    label.cex = 1.75,
    label.font = 2,
    size = c(rep(45, 3), rep(30, 6)),
    color = c(rep('orange', 3), rep('lightgrey', 6))
  ) +
  edges(
    c("Thing", "Blue",
      "Node", "Blue",
      "Vertex", "Pink",
      "Thing", "Small",
      "Node", "Large", 
      "Vertex", "Large",
      "Thing", "Circle",
      "Node", "Square",
      "Vertex", "Circle"),
    label = c(rep('Color', 3),
              rep("Size", 3),
              rep("Shape", 3)),
    label.cex = 1.5,
    label.font = 2
  )

layout = matrix(c(4.5, 7,
                  2, 3,
                  7, 3,
                  1, 6,
                  9, 1,
                  4.5, 10,
                  4.5, 1,
                  8, 6,
                  0, 1),
                ncol = 2,
                byrow = T)

plot(g, layout = layout)
```

Connections can be projected
========
```{r, echo = F, fig.width = 15, fig.height = 10}
plot(g - E(g)[V(g) %--% V(g)[c('Square', 'Small', 'Pink')]],
     layout = layout,
     vertex.size = c(rep(45, 3), rep(0, 6)),
     vertex.label = c('Thing', 'Node', 'Vertex', rep('', 6)))
```

These projections enrich our data
==========
```{r, echo = F, fig.width = 15, fig.height = 10}
plot(g - E(g) + edges(c("Node", "Thing",
                        "Vertex", "Node",
                        "Thing", "Vertex"),
                      label = c("Same color",
                                "Same size",
                                "Same shape")),
     layout = layout,
     vertex.size = c(rep(45, 3), rep(0, 6)),
     vertex.label = c('Thing', 'Node', 'Vertex', rep('', 6)),
     edge.label.cex = 1.75,
     edge.label.font = 2,
     edge.arrow.size = 0,
     edge.width = 3,
     edge.curved = T)
```

Practical Application: Recommendations
======

**<br><h2>35% of what consumers buy on Amazon and 75% of what users watch on Netflix come from product recommendations</h2>**

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec05.png")
```

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec06.png")
```

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec07.png")
```

Content Based Recommendations
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec08.png")
```

Content Based Recommendations 
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec09.png")
```

Collaborative Filtering 
========================================================

```{r echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec01.png")
```

Collaborative Filtering 
========================================================

```{r  echo=FALSE,  out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec02.png")
```

Collaborative Filtering 
========================================================

```{r echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec03.png")
```

Collaborative Filtering 
========================================================

```{r  echo=FALSE, out.width = '100%'}
knitr::include_graphics("collabFilter/shopRec04.png")
```

What nodes are important?
=====

```{r, echo=F, fig.width = 12}
set.seed(1234)
g <- sample_gnp(30, 5/20, directed = T)
V(g)$name <- 1:vcount(g)
V(g)$pr <- page_rank(g)$vector
V(g)$hub <- hub_score(g)$vector
V(g)$auth <- authority_score(g)$vector
V(g)$deg <- degree(g)
V(g)$btwn <- betweenness(g)
V(g)$close <- closeness(g, mode  = 'out')

layout <- layout_nicely(g)
plot(g, layout=layout, vertex.label = '', vertex.size = 12)
```

Diameter and Shortest Paths
===
```{r, echo=F, fig.width = 12}
dmter <- get_diameter(g) %>% {shortest_paths(g, from = .[1], to = .[length(.)], output = 'both')}

plot(g, layout = layout, vertex.label = '', vertex.size = 12,
     vertex.color = ifelse(V(g)$name %in% dmter$vpath[[1]], "skyblue", rgb(.2, .2, .2, .2)),
     edge.color = ifelse(E(g) %in% dmter$epath[[1]], 'orange', rgb(.2, .2, .2, .2)),
     edge.width = ifelse(E(g) %in% dmter$epath[[1]], 5, 1)
)

```

Degree
=======
```{r, echo=F, fig.width = 12}
V(g)$color <- ifelse(V(g)$deg >= tail(sort(V(g)$deg), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$deg/max(V(g)$deg)) * 20)
```


Betweenness
=======
```{r, echo=F, fig.width = 12}
V(g)$color <- ifelse(V(g)$btwn >= tail(sort(V(g)$btwn), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$btwn/max(V(g)$btwn)) * 20)
```

Closeness
=======
```{r, echo=F, fig.width = 12}
V(g)$color <- ifelse(V(g)$close >= tail(sort(V(g)$close), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$close/max(V(g)$close)) * 20)
```

Hub Score
=======
```{r, echo=F, fig.width = 12}
V(g)$color <- ifelse(V(g)$hub >= tail(sort(V(g)$hub), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$hub/max(V(g)$hub)) * 20)
```

Authority Score
=======
```{r, echo=F, fig.width = 12}
V(g)$color <- ifelse(V(g)$auth >= tail(sort(V(g)$auth), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$auth/max(V(g)$auth)) * 20)
```

PageRank
====
```{r, echo=F, fig.width = 12}
V(g)$color <- ifelse(V(g)$pr >= tail(sort(V(g)$pr), 5)[1], 'skyblue', 'orange')
plot(g, layout=layout, vertex.label = '', vertex.size = (V(g)$pr/max(V(g)$pr)) * 20)
```

Practical Application: Keyphrases
=========

**<h5>When people think of graphs, they often think about mapping out social media connections. While graphs are indeed useful for mapping out social networks, they have many other practical applications. Data in the real world resemble vertices and edges more than they resemble rows and columns. This allows researchers to intuitively grasp the data modeled and stored within a graph. Graph exploration -- also known as graph traversal -- is traditionally done with a traversal language such as Gremlin or Cypher. The functionality of these traversal languages can be duplicated by combining the igraph and magrittr packages. Traversing a graph in R gives useRs access to a myriad of simple, but powerful algorithms to explore their data sets. This talk will show why data should be explored as a graph as well as show how a graph can be traversed in R. I will do this by going through a survey of different graph traversal techniques and by showing the code patterns necessary for each of those techniques.</h5>**

Proximity as a connection
=====
```{r echo=F, fig.width = 12}
library(tidytext)

BenjaminOrtizUlloa <- "When people think of graphs, they often think about mapping out social media connections. While graphs are indeed useful for mapping out social networks, they have many other practical applications. Data in the real world resemble vertices and edges more than they resemble rows and columns. This allows researchers to intuitively grasp the data modeled and stored within a graph. Graph exploration -- also known as graph traversal -- is traditionally done with a traversal language such as Gremlin or Cypher. The functionality of these traversal languages can be duplicated by combining the igraph and magrittr packages. Traversing a graph in R gives useRs access to a myriad of simple, but powerful algorithms to explore their data sets. This talk will show why data should be explored as a graph as well as show how a graph can be traversed in R. I will do this by going through a survey of different graph traversal techniques and by showing the code patterns necessary for each of those techniques."

set.seed(1234)
BenjaminOrtizUlloa %>% 
  str_extract('^[^\\.]*\\.') %>% 
  data.frame(label = 'next', word = .) %>% 
  unnest_tokens(ngram, word, token = 'ngrams', n = 2) %>% 
  separate(ngram, c('from', 'to')) %>%
  select(from, to) %>%
  graph_from_data_frame() %>%
  plot(vertex.size = 0, vertex.label.font = 2, vertex.label.cex = 1.75)
```

Text Rank: Benjamin Ortiz Ulloa
=====
```{r, echo = F, fig.width = 12}
library(openNLP)
library(NLP)

sent_token_annotator <- Maxent_Sent_Token_Annotator()
pos_token_annotator <- Maxent_POS_Tag_Annotator()
word_token_annotator <- Maxent_Word_Token_Annotator()

createTextRank <- function(abstract){
  s <- as.String(abstract %>%str_to_lower())
  
  
  a <- annotate(s, list(sent_token_annotator, word_token_annotator, pos_token_annotator)) %>%
  {annotations_in_spans(subset(., type =="word"), subset(., type == 'sentence'))}
  
  wordsEdge <- lapply(a, function(x){
    words <- sprintf('%s::%s', sapply(x$features, '[[', 'POS'), s[x]) %>%
      str_to_upper() 
    tibble(
      from = words[1:(length(words)-1)],
      to = words[2:length(words)],
      nextOrder = 1:(length(words) -1)
    )
  }) %>%
    enframe(name = 'sentenceOrder') %>%
    unnest() %>%
    filter(str_detect(from, 'NN.*::|JJ.*::'),
           str_detect(to, 'NN.*::|JJ.*::')) %>%
    mutate_if(is.character, str_replace, pattern = '^.+::', replacement = '') %>%
    mutate_if(is.character, SnowballC::wordStem) %>%
    select(from, to, sentenceOrder, nextOrder)
  
  g <- graph_from_data_frame(wordsEdge)
  V(g)$pr <- page_rank(g)$vector
  g
}

MiguelGonzalez_Fierro <- "Apache Spark has become the technology of choice for big data engineering. However, provisioning and maintaining Spark clusters can be challenging and expensive. To address this issue, Microsoft has developed the Azure Distributed Data Engineering Toolkit AZTK. This talk describes how AZTK Spark clusters can be provisioned in the cloud from a local machine with just a few commands. The clusters are ready to use in under 5 minutes and come with R and R Studio Server pre-installed, allowing R users to start developing Spark applications immediately. Users can apply their own Docker image to customize the Spark environment. ATZK clusters, composed of low priority Azure virtual machines, can be created on demand and run only as needed allowing for large cost savings. We will show a short demo of how the pre-installed sparklyr package can be used to perform data engineering tasks using dplyr syntax, and machine learning using the Spark MLlib library."

BenjaminOrtizUlloa <- "When people think of graphs, they often think about mapping out social media connections. While graphs are indeed useful for mapping out social networks, they have many other practical applications. Data in the real world resemble vertices and edges more than they resemble rows and columns. This allows researchers to intuitively grasp the data modeled and stored within a graph. Graph exploration -- also known as graph traversal -- is traditionally done with a traversal language such as Gremlin or Cypher. The functionality of these traversal languages can be duplicated by combining the igraph and magrittr packages. Traversing a graph in R gives useRs access to a myriad of simple, but powerful algorithms to explore their data sets. This talk will show why data should be explored as a graph as well as show how a graph can be traversed in R. I will do this by going through a survey of different graph traversal techniques and by showing the code patterns necessary for each of those techniques."

AmyStringer <- "The Catlin Seaview project is a large scale reef survey for estimating coralcover at various locations around the world. Upon re-surveying, it is possible to track changes in, and predict the future condition of, these reefs over time. The survey collects hundreds of thousands of images from 2km transects of reef, which are then sent to a neural network for automatic annotation of reef communities. Annotations are completed in such a way that the resulting datahave hierarchical spatial scales going up from image, to transect, to reef, to subregion, to region. Here, we present an efficient method for extracting, summarising and visu-alising the big and complex data with Rmarkdown, dplyr and ggplot2. The use of Rmarkdown, for report generation, allows for the introduction of parameters into the construction of the document, allowing for entirely unique reports to bedeveloped from the one source script. This approach has resulted in a system for compiling 22 reproducible reports, extracting, summarising and visualising data at multiple spatial scales, from over 600 000 images, in a matter of minutes; leaving machines to do the work so that people have time to think."

SnehalataHuzurbazar <- "Dimension reduction for high-dimensional data is necessary for descriptive data analysis. Most researchers restrict themselves to visualizing 2 or 3 dimensions, however, to understand relationships between many variables in high-dimensional data, more dimensions are needed. This talk presents several new options for visualizing beyond 3D. These are illustrated using 16S rRNA microbiome data. We will show intensity plots developed to highlight the changing contributions of taxa (or subjects) as the number of principal components of the dimension reduction or ordination method are changed. And secondarily revive Andrews curves, connected with a tour algorithm for viewing 1D projections of multiple principal components, to study group behavior in the high-dimensional data. The plots provide a quick visualization of taxa subjects that are close to the center or that contribute to dissimilarity. They also allow for exploration of patterns among related subjects or taxa not seen in other visualizations. All code is written in R and available on Github."

set.seed(4321)
createTextRank(BenjaminOrtizUlloa) %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/3)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( vertex.size= 0, vertex.label.font = 2, vertex.label.cex = 1.5)
```

TextRank: Miguel Gonzalez-Fierro
=====
```{r echo = F, fig.width = 12}
set.seed(4321)
MiguelGonzalez_Fierro %>%
  createTextRank() %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/3)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( vertex.size= 0, vertex.label.font = 2, vertex.label.cex = 1.5)
```

TextRank: Amy Stringer
====
```{r echo = F, fig.width = 12}
set.seed(4321)
AmyStringer %>%
  createTextRank() %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/3)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( vertex.size= 0, vertex.label.font = 2, vertex.label.cex = 1.5)
```

TextRank: Snehalata Huzurbazar
======
```{r echo = F, fig.width = 12}
set.seed(4321)
SnehalataHuzurbazar %>%
  createTextRank() %>%
  {. - V(.)[pr < sort(V(.)$pr, T)[ceiling(vcount(.)/3)]]} %>%
  {. - V(.)[degree(.) == 0]} %>%
  plot( vertex.size= 0, vertex.label.font = 2, vertex.label.cex = 1.5)
```